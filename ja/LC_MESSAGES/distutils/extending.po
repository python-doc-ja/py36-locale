# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-05 15:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Arihiro TAKASE <artakase@gmail.com>, 2017\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../distutils/extending.rst:5
msgid "Extending Distutils"
msgstr "Distutilsの拡張"

#: ../../distutils/extending.rst:7
msgid ""
"Distutils can be extended in various ways.  Most extensions take the form of"
" new commands or replacements for existing commands.  New commands may be "
"written to support new types of platform-specific packaging, for example, "
"while replacements for existing commands may be made to modify details of "
"how the command operates on a package."
msgstr ""
"Distutilsは様々な方法で拡張できます。ほとんどの拡張は新規のコマンドという形をとるか、既存のコマンドを置換します。例えば、新しいコマンドはプラットフォーム特有の新しいパッケージ形式をサポートするために書かれているかもしませんし、既存のコマンドを置換するものは既存コマンドでのパッケージ処理の詳細を変更するでしょう。"

#: ../../distutils/extending.rst:13
msgid ""
"Most extensions of the distutils are made within :file:`setup.py` scripts "
"that want to modify existing commands; many simply add a few file extensions"
" that should be copied into packages in addition to :file:`.py` files as a "
"convenience."
msgstr ""
"ほとんどのdistutilsの拡張は、既存コマンドの動作を修正したい :file:`setup.py` "
"スクリプト中で行われます。その多くは、パッケージ中にコピーすべきファイルとして、 :file:`.py` "
"ファイル以外のいくつかのファイル拡張子を単に追加するものです。"

#: ../../distutils/extending.rst:18
msgid ""
"Most distutils command implementations are subclasses of the "
":class:`distutils.cmd.Command` class.  New commands may directly inherit "
"from :class:`Command`, while replacements often derive from :class:`Command`"
" indirectly, directly subclassing the command they are replacing.  Commands "
"are required to derive from :class:`Command`."
msgstr ""
"ほとんどのdistutilsのコマンド実装は :mod:`distutils.cmd` の :class:`distutils.cmd.Command`"
" クラスのサブクラスとして実装されています。新しいコマンドは :class:`Command` "
"を直接継承し、置換するコマンドでは置換対象のコマンドのサブクラスにすることで :class:`Command` を間接的に継承します。コマンドは "
":class:`Command` から派生したものである必要があります。"

#: ../../distutils/extending.rst:33
msgid "Integrating new commands"
msgstr "新しいコマンドの統合"

#: ../../distutils/extending.rst:35
msgid ""
"There are different ways to integrate new command implementations into "
"distutils.  The most difficult is to lobby for the inclusion of the new "
"features in distutils itself, and wait for (and require) a version of Python"
" that provides that support.  This is really hard for many reasons."
msgstr ""
"新しいコマンド実装をdistutilsに統合するにはいくつかの方法があります。一番難しい方法は新機能をdistutils本体に取り込むように働きかけ、そのサポートを提供するPythonのバージョンが出ることを待つ(そして要求する)ことです。これは様々な理由で本当に難しいことです。"

#: ../../distutils/extending.rst:40
msgid ""
"The most common, and possibly the most reasonable for most needs, is to "
"include the new implementations with your :file:`setup.py` script, and cause"
" the :func:`distutils.core.setup` function use them::"
msgstr ""
"もっとも一般的な、そしておそらくほとんどの場合にもっとも妥当な方法は、新しい実装をあなたの :file:`setup.py` スクリプトに取り込み、 "
":func:`distutils.core.setup` 関数でそれらを使うようにすることです::"

#: ../../distutils/extending.rst:55
msgid ""
"This approach is most valuable if the new implementations must be used to "
"use a particular package, as everyone interested in the package will need to"
" have the new command implementation."
msgstr ""
"このアプローチは、新実装をある特定のパッケージで利用したい時、そのパッケージに興味をもつ人全員がコマンドの新実装を必要とする時にもっとも価値があります。"

#: ../../distutils/extending.rst:59
msgid ""
"Beginning with Python 2.4, a third option is available, intended to allow "
"new commands to be added which can support existing :file:`setup.py` scripts"
" without requiring modifications to the Python installation.  This is "
"expected to allow third-party extensions to provide support for additional "
"packaging systems, but the commands can be used for anything distutils "
"commands can be used for.  A new configuration option, ``command_packages`` "
"(command-line option :option:`!--command-packages`), can be used to specify "
"additional packages to be searched for modules implementing commands.  Like "
"all distutils options, this can be specified on the command line or in a "
"configuration file.  This option can only be set in the ``[global]`` section"
" of a configuration file, or before any commands on the command line.  If "
"set in a configuration file, it can be overridden from the command line; "
"setting it to an empty string on the command line causes the default to be "
"used.  This should never be set in a configuration file provided with a "
"package."
msgstr ""

#: ../../distutils/extending.rst:74
msgid ""
"This new option can be used to add any number of packages to the list of "
"packages searched for command implementations; multiple package names should"
" be separated by commas.  When not specified, the search is only performed "
"in the :mod:`distutils.command` package.  When :file:`setup.py` is run with "
"the option ``--command-packages distcmds,buildcmds``, however, the packages "
":mod:`distutils.command`, :mod:`distcmds`, and :mod:`buildcmds` will be "
"searched in that order.  New commands are expected to be implemented in "
"modules of the same name as the command by classes sharing the same name.  "
"Given the example command line option above, the command "
":command:`bdist_openpkg` could be implemented by the class "
":class:`distcmds.bdist_openpkg.bdist_openpkg` or "
":class:`buildcmds.bdist_openpkg.bdist_openpkg`."
msgstr ""
"この新オプションによってコマンド実装を探すためのパッケージをいくつでも追加することができます。複数のパッケージ名はコンマで区切って指定します。指定がなければ、検索は"
" :mod:`distutils.command` パッケージのみで行われます。ただし :file:`setup.py` がオプション "
"``--command-packages distcmds,buildcmds`` で実行されている場合には、パッケージは "
":mod:`distutils.command` 、 :mod:`distcmds` 、そして :mod:`buildcmds` "
"を、この順番で検索します。新コマンドはコマンドと同じ名前のモジュールに、コマンドと同じ名前のクラスで実装されていると想定しています。上のコマドラインオプションの例では、コマンド"
" :command:`bdist_openpkg` は、 :class:`distcmds.bdist_openpkg.bdist_openpkg` "
"か、 :class:`buildcmds.bdist_openpkg.bdist_openpkg` で実装されるかもしれません。"

#: ../../distutils/extending.rst:88
msgid "Adding new distribution types"
msgstr "配布物の種類を追加する"

#: ../../distutils/extending.rst:90
msgid ""
"Commands that create distributions (files in the :file:`dist/` directory) "
"need to add ``(command, filename)`` pairs to "
"``self.distribution.dist_files`` so that :command:`upload` can upload it to "
"PyPI.  The *filename* in the pair contains no path information, only the "
"name of the file itself.  In dry-run mode, pairs should still be added to "
"represent what would have been created."
msgstr ""
"配布物 (:file:`dist/` ディレクトリの中のファイル) を作成するコマンドは、 :command:`upload` "
"がその配布物をPyPIにアップロードできるように、 ``(command, filename)`` のペアを "
"``self.distribution.dist_files`` に追加する必要があります。ペア中の *filename* "
"はパスに関する情報を持たず、単にファイル名だけを持ちます。 dry-run モードでも、何が作成されたかを示すために、同じペアが必要になります。"
