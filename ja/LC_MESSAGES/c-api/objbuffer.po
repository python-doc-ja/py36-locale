# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-05 15:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: cocoatomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/objbuffer.rst:4
msgid "Old Buffer Protocol"
msgstr "古いバッファプロトコル"

#: ../../c-api/objbuffer.rst:8
msgid ""
"These functions were part of the \"old buffer protocol\" API in Python 2. In"
" Python 3, this protocol doesn't exist anymore but the functions are still "
"exposed to ease porting 2.x code.  They act as a compatibility wrapper "
"around the :ref:`new buffer protocol <bufferobjects>`, but they don't give "
"you control over the lifetime of the resources acquired when a buffer is "
"exported."
msgstr ""
"これらの関数は、 Python 2 の「古いバッファプロトコル」 API の一部です。 Python 3 では、もうこのプロトコルは存在しませんが、 "
"2.x のコードを移植しやすいように関数は公開されています。 :ref:`新しいバッファプロトコル <bufferobjects>` "
"と互換性のあるラッパー関数のように振る舞いますが、バッファがエクスポートされるときに取得されるリソースの生存期間を管理することはできません。"

#: ../../c-api/objbuffer.rst:15
msgid ""
"Therefore, it is recommended that you call :c:func:`PyObject_GetBuffer` (or "
"the ``y*`` or ``w*`` :ref:`format codes <arg-parsing>` with the "
":c:func:`PyArg_ParseTuple` family of functions) to get a buffer view over an"
" object, and :c:func:`PyBuffer_Release` when the buffer view can be "
"released."
msgstr ""
"従って、あるオブジェクトのバッファビューを取得するために、 :c:func:`PyObject_GetBuffer` (もしくは ``y*`` および "
"``w*``  :ref:`フォーマットコード <arg-parsing>` で :c:func:`PyArg_ParseTuple` やその仲間) "
"を呼び出し、バッファビューを解放するときには :c:func:`PyBuffer_Release` を呼び出します。"

#: ../../c-api/objbuffer.rst:23
msgid ""
"Returns a pointer to a read-only memory location usable as character-based "
"input.  The *obj* argument must support the single-segment character buffer "
"interface.  On success, returns ``0``, sets *buffer* to the memory location "
"and *buffer_len* to the buffer length.  Returns ``-1`` and sets a "
":exc:`TypeError` on error."
msgstr ""
"文字ベースの入力として使える読み出し専用メモリ上の位置へのポインタを返します。 *obj* "
"引数は単一セグメントからなる文字バッファインタフェースをサポートしていなければなりません。成功すると ``0`` を返し、 *buffer* "
"をメモリの位置に、  *buffer_len* をバッファの長さに設定します。エラーの際には  ``-1`` を返し、 :exc:`TypeError`"
" をセットします。"

#: ../../c-api/objbuffer.rst:32
msgid ""
"Returns a pointer to a read-only memory location containing arbitrary data. "
"The *obj* argument must support the single-segment readable buffer "
"interface.  On success, returns ``0``, sets *buffer* to the memory location "
"and *buffer_len* to the buffer length.  Returns ``-1`` and sets a "
":exc:`TypeError` on error."
msgstr ""
"任意のデータを収めた読み出し専用のメモリ上の位置へのポインタを返します。 *obj* "
"引数は単一セグメントからなる読み出し可能バッファインタフェースをサポートしていなければなりません。成功すると ``0`` を返し、 *buffer* "
"をメモリの位置に、  *buffer_len* をバッファの長さに設定します。エラーの際には  ``-1`` を返し、 :exc:`TypeError`"
" をセットします。"

#: ../../c-api/objbuffer.rst:41
msgid ""
"Returns ``1`` if *o* supports the single-segment readable buffer interface. "
"Otherwise returns ``0``."
msgstr ""
"*o* が単一セグメントからなる読み出し可能バッファインタフェースをサポートしている場合に ``1`` を返します。それ以外の場合には ``0`` "
"を返します。"

#: ../../c-api/objbuffer.rst:47
msgid ""
"Returns a pointer to a writable memory location.  The *obj* argument must "
"support the single-segment, character buffer interface.  On success, returns"
" ``0``, sets *buffer* to the memory location and *buffer_len* to the buffer "
"length.  Returns ``-1`` and sets a :exc:`TypeError` on error."
msgstr ""
"書き込み可能なメモリ上の位置へのポインタを返します。 *obj*  "
"引数は単一セグメントからなる文字バッファインタフェースをサポートしていなければなりません。成功すると ``0`` を返し、 *buffer* "
"をメモリの位置に、 *buffer_len* をバッファの長さに設定します。エラーの際には ``-1`` を返し、 :exc:`TypeError` "
"をセットします。"
