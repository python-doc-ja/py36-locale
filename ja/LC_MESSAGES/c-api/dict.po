# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-05 15:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: cocoatomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/dict.rst:6
msgid "Dictionary Objects"
msgstr "辞書オブジェクト (dictionary object)"

#: ../../c-api/dict.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python dictionary object."
msgstr "この :c:type:`PyObject` のサブタイプは Python の辞書オブジェクトを表現します。"

#: ../../c-api/dict.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python dictionary "
"type.  This is the same object as :class:`dict` in the Python layer."
msgstr ""
"この :c:type:`PyTypeObject` のインスタンスは Python の辞書を表現します。このオブジェクトは、Python レイヤにおける"
" :class:`dict` と同じオブジェクトです。"

#: ../../c-api/dict.rst:24
msgid ""
"Return true if *p* is a dict object or an instance of a subtype of the dict "
"type."
msgstr "引数が辞書オブジェクトか辞書型のサブタイプのインスタンスの場合に真を返します。"

#: ../../c-api/dict.rst:30
msgid ""
"Return true if *p* is a dict object, but not an instance of a subtype of the"
" dict type."
msgstr "*p* が辞書オブジェクトであり、かつ辞書型のサブクラスのインスタンスでない場合に真を返します。"

#: ../../c-api/dict.rst:36
msgid "Return a new empty dictionary, or *NULL* on failure."
msgstr "空の新たな辞書を返します。失敗すると *NULL* を返します。"

#: ../../c-api/dict.rst:41
msgid ""
"Return a :class:`types.MappingProxyType` object for a mapping which enforces"
" read-only behavior.  This is normally used to create a view to prevent "
"modification of the dictionary for non-dynamic class types."
msgstr ""
"あるマップ型オブジェクトに対して、読み出し専用に制限された :class:`types.MappingProxyType` "
"オブジェクトを返します。通常、この関数は動的でないクラス型 (non-dynamic class type) "
"のクラス辞書が変更されないようにビューを作成するために使われます。"

#: ../../c-api/dict.rst:48
msgid "Empty an existing dictionary of all key-value pairs."
msgstr "現在辞書に入っている全てのキーと値のペアを除去して空にします。"

#: ../../c-api/dict.rst:53
msgid ""
"Determine if dictionary *p* contains *key*.  If an item in *p* is matches "
"*key*, return ``1``, otherwise return ``0``.  On error, return ``-1``. This "
"is equivalent to the Python expression ``key in p``."
msgstr ""
"辞書 *p* に *key* が入っているか判定します。*p* の要素が *key* に一致した場合は ``1`` を返し、それ以外の場合には "
"``0`` を返します。エラーの場合 ``-1`` を返します。この関数は Python の式 ``key in p`` と等価です。"

#: ../../c-api/dict.rst:60
msgid "Return a new dictionary that contains the same key-value pairs as *p*."
msgstr "*p* と同じキーと値のペアが入った新たな辞書を返します。"

#: ../../c-api/dict.rst:65
msgid ""
"Insert *value* into the dictionary *p* with a key of *key*.  *key* must be "
":term:`hashable`; if it isn't, :exc:`TypeError` will be raised. Return ``0``"
" on success or ``-1`` on failure."
msgstr ""
"辞書 *p* に、 *key* をキーとして値 *value* を挿入します。 *key* "
"はハッシュ可能(:term:`hashable`)でなければなりません; ハッシュ可能でない場合、 :exc:`TypeError` "
"を送出します。成功した場合には ``0`` を、失敗した場合には ``-1`` を返します。"

#: ../../c-api/dict.rst:74
msgid ""
"Insert *value* into the dictionary *p* using *key* as a key. *key* should be"
" a :c:type:`char\\*`.  The key object is created using "
"``PyUnicode_FromString(key)``.  Return ``0`` on success or ``-1`` on "
"failure."
msgstr ""
"辞書 *p* に、 *key* をキーとして値 *value* を挿入します。 *key* は :c:type:`char\\*` "
"型でなければなりません。キーオブジェクトは ``PyUnicode_FromString(key)`` で生成されます。成功した場合には ``0`` "
"を、失敗した場合には ``-1`` を返します。"

#: ../../c-api/dict.rst:82
msgid ""
"Remove the entry in dictionary *p* with key *key*. *key* must be hashable; "
"if it isn't, :exc:`TypeError` is raised.  Return ``0`` on success or ``-1`` "
"on failure."
msgstr ""
"辞書 *p* から *key* をキーとするエントリを除去します。 *key* はハッシュ可能でなければなりません;  ハッシュ可能でない場合、 "
":exc:`TypeError` を送出します。成功した場合には ``0`` を、失敗した場合には ``-1`` を返します。"

#: ../../c-api/dict.rst:89
msgid ""
"Remove the entry in dictionary *p* which has a key specified by the string "
"*key*.  Return ``0`` on success or ``-1`` on failure."
msgstr ""
"辞書 *p* から文字列 *key* をキーとするエントリを除去します。成功した場合には ``0`` を、失敗した場合には ``-1`` を返します。"

#: ../../c-api/dict.rst:95
msgid ""
"Return the object from dictionary *p* which has a key *key*.  Return *NULL* "
"if the key *key* is not present, but *without* setting an exception."
msgstr ""
"辞書 *p* 内で *key* をキーとするオブジェクトを返します。キー *key* が存在しない場合には *NULL* を返しますが、例外をセット "
"*しません*。"

#: ../../c-api/dict.rst:101
msgid ""
"Variant of :c:func:`PyDict_GetItem` that does not suppress exceptions. "
"Return *NULL* **with** an exception set if an exception occurred.  Return "
"*NULL* **without** an exception set if the key wasn't present."
msgstr ""
":c:func:`PyDict_GetItem` の変種で例外を隠しません。例外が発生した場合は、例外をセット **した上で** *NULL* "
"を返します。キーが存在しなかった場合は、例外をセット **せずに** *NULL* を返します。"

#: ../../c-api/dict.rst:109
msgid ""
"This is the same as :c:func:`PyDict_GetItem`, but *key* is specified as a "
":c:type:`char\\*`, rather than a :c:type:`PyObject\\*`."
msgstr ""
":c:func:`PyDict_GetItem` と同じですが、 *key* は :c:type:`PyObject\\*` ではなく "
":c:type:`char\\*` で指定します。"

#: ../../c-api/dict.rst:115
msgid ""
"This is the same as the Python-level :meth:`dict.setdefault`.  If present, "
"it returns the value corresponding to *key* from the dictionary *p*.  If the"
" key is not in the dict, it is inserted with value *defaultobj* and "
"*defaultobj* is returned.  This function evaluates the hash function of "
"*key* only once, instead of evaluating it independently for the lookup and "
"the insertion."
msgstr ""
"これは Python レベルの :meth:`dict.setdefault` と同じです。\n"
"もしあれば、辞書 *p* から *key* に対応する値を返します。\n"
"キーが辞書になければ、値 *defaultobj* を挿入し *defaultobj* を返します。\n"
"この関数は、 *key* のハッシュ値を検索と挿入ごとに別々に評価するのではなく、一度だけしか評価しません。"

#: ../../c-api/dict.rst:125
msgid ""
"Return a :c:type:`PyListObject` containing all the items from the "
"dictionary."
msgstr "辞書内の全ての要素対が入った :c:type:`PyListObject` を返します。"

#: ../../c-api/dict.rst:130
msgid ""
"Return a :c:type:`PyListObject` containing all the keys from the dictionary."
msgstr "辞書内の全てのキーが入った :c:type:`PyListObject` を返します。"

#: ../../c-api/dict.rst:135
msgid ""
"Return a :c:type:`PyListObject` containing all the values from the "
"dictionary *p*."
msgstr "辞書 *p* 内の全ての値が入った :c:type:`PyListObject` を返します。"

#: ../../c-api/dict.rst:143
msgid ""
"Return the number of items in the dictionary.  This is equivalent to "
"``len(p)`` on a dictionary."
msgstr "辞書内の要素の数を返します。辞書に対して ``len(p)`` を実行するのと同じです。"

#: ../../c-api/dict.rst:149
msgid ""
"Iterate over all key-value pairs in the dictionary *p*.  The "
":c:type:`Py_ssize_t` referred to by *ppos* must be initialized to ``0`` "
"prior to the first call to this function to start the iteration; the "
"function returns true for each pair in the dictionary, and false once all "
"pairs have been reported.  The parameters *pkey* and *pvalue* should either "
"point to :c:type:`PyObject\\*` variables that will be filled in with each "
"key and value, respectively, or may be *NULL*.  Any references returned "
"through them are borrowed.  *ppos* should not be altered during iteration. "
"Its value represents offsets within the internal dictionary structure, and "
"since the structure is sparse, the offsets are not consecutive."
msgstr ""
"辞書 *p* 内の全てのキー/値のペアにわたる反復処理を行います。 *ppos* が参照している :c:type:`Py_ssize_t` "
"型は、この関数で反復処理を開始する際に、最初に関数を呼び出すよりも前に ``0`` に初期化しておかなければなりません; "
"この関数は辞書内の各ペアを取り上げるごとに真を返し、全てのペアを取り上げたことが分かると偽を返します。パラメタ *pkey* および *pvalue* "
"には、それぞれ辞書の各々のキーと値が埋められた :c:type:`PyObject\\*` 変数を指すポインタか、または *NULL* "
"が入ります。この関数から返される参照はすべて借用参照になります。反復処理中に *ppos* "
"を変更してはなりません。この値は内部的な辞書構造体のオフセットを表現しており、構造体はスパースなので、オフセットの値に一貫性がないためです。"

#: ../../c-api/dict.rst:160
msgid "For example::"
msgstr "例えば::"

#: ../../c-api/dict.rst:170
msgid ""
"The dictionary *p* should not be mutated during iteration.  It is safe to "
"modify the values of the keys as you iterate over the dictionary, but only "
"so long as the set of keys does not change.  For example::"
msgstr ""
"反復処理中に辞書 *p* "
"を変更してはなりません。辞書を反復処理する際に、キーに対応する値を変更しても大丈夫になりましたが、キーの集合を変更しないことが前提です。以下に例を示します::"

#: ../../c-api/dict.rst:195
msgid ""
"Iterate over mapping object *b* adding key-value pairs to dictionary *a*. "
"*b* may be a dictionary, or any object supporting :c:func:`PyMapping_Keys` "
"and :c:func:`PyObject_GetItem`. If *override* is true, existing pairs in *a*"
" will be replaced if a matching key is found in *b*, otherwise pairs will "
"only be added if there is not a matching key in *a*. Return ``0`` on success"
" or ``-1`` if an exception was raised."
msgstr ""
"マップ型オブジェクト *b* の全ての要素にわたって、反復的にキー/値のペアを辞書 *a* に追加します。 *b* は辞書か、 "
":c:func:`PyMapping_Keys` または :c:func:`PyObject_GetItem` "
"をサポートする何らかのオブジェクトにできます。 *override* が真ならば、 *a* のキーと一致するキーが *b* "
"にある際に、既存のペアを置き換えます。それ以外の場合は、 *b* のキーに一致するキーが *a* にないときのみ追加を行います。成功した場合には "
"``0`` を返し、例外が送出された場合には ``-1`` を返します。"

#: ../../c-api/dict.rst:205
msgid ""
"This is the same as ``PyDict_Merge(a, b, 1)`` in C, and is similar to "
"``a.update(b)`` in Python except that :c:func:`PyDict_Update` doesn't fall "
"back to the iterating over a sequence of key value pairs if the second "
"argument has no \"keys\" attribute.  Return ``0`` on success or ``-1`` if an"
" exception was raised."
msgstr ""
"C で表せば ``PyDict_Merge(a, b, 1)`` と同じで、また Python の ``a.update(b)`` と似ていますが、 "
":c:func:`PyDict_Update` は第二引数が \"keys\" "
"属性を持たない場合にキー/値ペアのシーケンスを反復することはありません。成功した場合には ``0`` を返し、例外が送出された場合には ``-1`` "
"を返します。"

#: ../../c-api/dict.rst:214
msgid ""
"Update or merge into dictionary *a*, from the key-value pairs in *seq2*. "
"*seq2* must be an iterable object producing iterable objects of length 2, "
"viewed as key-value pairs.  In case of duplicate keys, the last wins if "
"*override* is true, else the first wins. Return ``0`` on success or ``-1`` "
"if an exception was raised. Equivalent Python (except for the return "
"value)::"
msgstr ""
"*seq2* 内のキー/値ペアを使って、辞書 *a* の内容を更新したり統合したりします。*seq2* は、キー/値のペアとみなせる長さ 2 "
"の反復可能オブジェクト(iterable object) "
"を生成する反復可能オブジェクトでなければなりません。重複するキーが存在する場合、*override* "
"が真ならば先に出現したキーを使い、そうでない場合は後に出現したキーを使います。成功した場合には ``0`` を返し、例外が送出された場合には "
"``-1`` を返します。(戻り値以外は) 等価な Python コードを書くと、以下のようになります::"

#: ../../c-api/dict.rst:229
msgid "Clear the free list. Return the total number of freed items."
msgstr "free list をクリアします。解放された要素数を返します。"
