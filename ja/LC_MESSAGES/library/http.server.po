# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-05 15:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: SHIMIZU Taku <shimizu.taku@gmail.com>, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/http.server.rst:2
msgid ":mod:`http.server` --- HTTP servers"
msgstr ":mod:`http.server` --- HTTP サーバ"

#: ../../library/http.server.rst:7
msgid "**Source code:** :source:`Lib/http/server.py`"
msgstr "**ソースコード:** :source:`Lib/http/server.py`"

#: ../../library/http.server.rst:17
msgid ""
"This module defines classes for implementing HTTP servers (Web servers)."
msgstr "このモジュールは HTTP (web) サーバを実装するためのクラスを提供しています。"

#: ../../library/http.server.rst:19
msgid ""
"One class, :class:`HTTPServer`, is a :class:`socketserver.TCPServer` "
"subclass. It creates and listens at the HTTP socket, dispatching the "
"requests to a handler.  Code to create and run the server looks like this::"
msgstr ""
"クラス :class:`HTTPServer` は :class:`socketserver.TCPServer` のサブクラスです。\n"
":class:`HTTPServer` は HTTP ソケットを生成してリクエスト待ち (listen) を行い、リクエストをハンドラに渡します。\n"
"サーバを作成して動作させるためのコードは以下のようになります::"

#: ../../library/http.server.rst:31
msgid ""
"This class builds on the :class:`~socketserver.TCPServer` class by storing "
"the server address as instance variables named :attr:`server_name` and "
":attr:`server_port`. The server is accessible by the handler, typically "
"through the handler's :attr:`server` instance variable."
msgstr ""
"このクラスは :class:`~socketserver.TCPServer` クラスの上に構築されており、サーバのアドレスをインスタンス変数 :attr:`server_name` および :attr:`server_port` に記憶します。\n"
"サーバはハンドラからアクセス可能で、通常ハンドラの :attr:`server` インスタンス変数からアクセスします。"

#: ../../library/http.server.rst:37
msgid ""
"The :class:`HTTPServer` must be given a *RequestHandlerClass* on "
"instantiation, of which this module provides three different variants:"
msgstr ""
":class:`HTTPServer` は *RequestHandlerClass* "
"の初期化のときに与えられなければならず、このモジュールはこのクラスの3つの変種を提供しています:"

#: ../../library/http.server.rst:42
msgid ""
"This class is used to handle the HTTP requests that arrive at the server.  "
"By itself, it cannot respond to any actual HTTP requests; it must be "
"subclassed to handle each request method (e.g. GET or POST). "
":class:`BaseHTTPRequestHandler` provides a number of class and instance "
"variables, and methods for use by subclasses."
msgstr ""
"このクラスはサーバに到着したリクエストを処理します。\n"
"このメソッド自体では、実際のリクエストに応答することはできません; (GET や POST のような) 各リクエストメソッドを処理するためにはサブクラス化しなければなりません。\n"
":class:`BaseHTTPRequestHandler` では、サブクラスで使うためのクラスやインスタンス変数、メソッド群を数多く提供しています。"

#: ../../library/http.server.rst:48
msgid ""
"The handler will parse the request and the headers, then call a method "
"specific to the request type. The method name is constructed from the "
"request. For example, for the request method ``SPAM``, the :meth:`do_SPAM` "
"method will be called with no arguments. All of the relevant information is "
"stored in instance variables of the handler.  Subclasses should not need to "
"override or extend the :meth:`__init__` method."
msgstr ""
"このハンドラはリクエストを解釈し、次いでリクエスト形式ごとに固有のメソッドを呼び出します。メソッド名はリクエストの名称から構成されます。例えば、リクエストメソッド"
" ``SPAM`` に対しては、 :meth:`do_SPAM` "
"メソッドが引数なしで呼び出されます。リクエストに関連する情報は全て、ハンドラのインスタンス変数に記憶されています。サブクラスでは "
":meth:`__init__` メソッドを上書きしたり拡張したりする必要はありません。"

#: ../../library/http.server.rst:55
msgid ":class:`BaseHTTPRequestHandler` has the following instance variables:"
msgstr ":class:`BaseHTTPRequestHandler` は以下のインスタンス変数を持っています:"

#: ../../library/http.server.rst:59
msgid ""
"Contains a tuple of the form ``(host, port)`` referring to the client's "
"address."
msgstr "HTTP クライアントのアドレスを参照している、``(host, port)`` の形式をとるタプルが入っています。"

#: ../../library/http.server.rst:64
msgid "Contains the server instance."
msgstr "server インスタンスが入っています。"

#: ../../library/http.server.rst:68
msgid ""
"Boolean that should be set before :meth:`handle_one_request` returns, "
"indicating if another request may be expected, or if the connection should "
"be shut down."
msgstr ""
":meth:`handle_one_request` "
"が返る前に設定すべき真偽値で、別のリクエストが期待されているかどうか、もしくはコネクションを切断すべきかどうかを指し示しています。"

#: ../../library/http.server.rst:74
msgid ""
"Contains the string representation of the HTTP request line. The terminating"
" CRLF is stripped. This attribute should be set by "
":meth:`handle_one_request`. If no valid request line was processed, it "
"should be set to the empty string."
msgstr ""
"HTTP リクエスト行の文字列表現を保持しています。\n"
"末尾の CRLF は除去されています。\n"
"この属性は :meth:`handle_one_request` によって設定されるべきです。\n"
"妥当なリクエスト行が1行も処理されなかった場合は、空文字列に設定されるべきです。"

#: ../../library/http.server.rst:81
msgid "Contains the command (request type). For example, ``'GET'``."
msgstr "HTTP 命令 (リクエスト形式) が入っています。例えば ``'GET'`` です。"

#: ../../library/http.server.rst:85
msgid "Contains the request path."
msgstr "リクエストされたパスが入っています。"

#: ../../library/http.server.rst:89
msgid ""
"Contains the version string from the request. For example, ``'HTTP/1.0'``."
msgstr "リクエストのバージョン文字列が入っています。例えば ``'HTTP/1.0'`` です。"

#: ../../library/http.server.rst:93
msgid ""
"Holds an instance of the class specified by the :attr:`MessageClass` class "
"variable. This instance parses and manages the headers in the HTTP request. "
"The :func:`~http.client.parse_headers` function from :mod:`http.client` is "
"used to parse the headers and it requires that the HTTP request provide a "
"valid :rfc:`2822` style header."
msgstr ""
":attr:`MessageClass` クラス変数で指定されたクラスのインスタンスを保持しています。\n"
"このインスタンスは HTTP リクエストのヘッダを解釈し、管理しています。\n"
":mod:`http.client` の :func:`~http.client.parse_headers` 関数がヘッダを解釈するために使われ、 HTTP リクエストが妥当な :rfc:`2822` スタイルのヘッダを提供することを要求します。"

#: ../../library/http.server.rst:101
msgid ""
"An :class:`io.BufferedIOBase` input stream, ready to read from the start of "
"the optional input data."
msgstr ""

#: ../../library/http.server.rst:106
msgid ""
"Contains the output stream for writing a response back to the client. Proper"
" adherence to the HTTP protocol must be used when writing to this stream in "
"order to achieve successful interoperation with HTTP clients."
msgstr ""

#: ../../library/http.server.rst:111
msgid "This is an :class:`io.BufferedIOBase` stream."
msgstr ""

#: ../../library/http.server.rst:114
msgid ":class:`BaseHTTPRequestHandler` has the following attributes:"
msgstr ":class:`BaseHTTPRequestHandler` は以下の属性を持っています:"

#: ../../library/http.server.rst:118
msgid ""
"Specifies the server software version.  You may want to override this. The "
"format is multiple whitespace-separated strings, where each string is of the"
" form name[/version]. For example, ``'BaseHTTP/0.2'``."
msgstr ""
"サーバのソフトウェアバージョンを指定します。この値は上書きする必要が生じるかもしれません。書式は複数の文字列を空白で分割したもので、各文字列はソフトウェア名[/バージョン]"
" の形式をとります。例えば、``'BaseHTTP/0.2'`` です。"

#: ../../library/http.server.rst:124
msgid ""
"Contains the Python system version, in a form usable by the "
":attr:`version_string` method and the :attr:`server_version` class variable."
" For example, ``'Python/1.4'``."
msgstr ""
"Python 処理系のバージョンが, :attr:`version_string` メソッドや :attr:`server_version` "
"クラス変数で利用可能な形式で入っています。例えば ``'Python/1.4'`` です。"

#: ../../library/http.server.rst:130
msgid ""
"Specifies a format string that should be used by :meth:`send_error` method "
"for building an error response to the client. The string is filled by "
"default with variables from :attr:`responses` based on the status code that "
"passed to :meth:`send_error`."
msgstr ""

#: ../../library/http.server.rst:137
msgid ""
"Specifies the Content-Type HTTP header of error responses sent to the "
"client.  The default value is ``'text/html'``."
msgstr ""
"エラーレスポンスをクライアントに送信する時に使う Content-Type HTTP ヘッダを指定します。デフォルトでは ``'text/html'``"
" です。"

#: ../../library/http.server.rst:142
msgid ""
"This specifies the HTTP protocol version used in responses.  If set to "
"``'HTTP/1.1'``, the server will permit HTTP persistent connections; however,"
" your server *must* then include an accurate ``Content-Length`` header "
"(using :meth:`send_header`) in all of its responses to clients. For "
"backwards compatibility, the setting defaults to ``'HTTP/1.0'``."
msgstr ""
"この値には応答に使われる HTTP プロトコルのバージョンを指定します。 ``'HTTP/1.1'`` に設定されると、サーバは持続的 HTTP "
"接続を許可します; しかしその場合、サーバは全てのクライアントに対する応答に、正確な値を持つ ``Content-Length`` ヘッダを "
"(:meth:`send_header` を使って) 含め *なければなりません* 。以前のバージョンとの互換性を保つため、標準の設定値は "
"``'HTTP/1.0'`` です。"

#: ../../library/http.server.rst:150
msgid ""
"Specifies an :class:`email.message.Message`\\ -like class to parse HTTP "
"headers.  Typically, this is not overridden, and it defaults to "
":class:`http.client.HTTPMessage`."
msgstr ""
"HTTP ヘッダを解釈するための :class:`email.message.Message` 類似のクラスを指定します。\n"
"通常この値が上書きされることはなく、デフォルトの :class:`http.client.HTTPMessage` になっています。"

#: ../../library/http.server.rst:156
msgid ""
"This attribute contains a mapping of error code integers to two-element "
"tuples containing a short and long message. For example, ``{code: "
"(shortmessage, longmessage)}``. The *shortmessage* is usually used as the "
"*message* key in an error response, and *longmessage* as the *explain* key."
"  It is used by :meth:`send_response_only` and :meth:`send_error` methods."
msgstr ""

#: ../../library/http.server.rst:162
msgid "A :class:`BaseHTTPRequestHandler` instance has the following methods:"
msgstr ":class:`BaseHTTPRequestHandler` インスタンスは以下のメソッドを持っています:"

#: ../../library/http.server.rst:166
msgid ""
"Calls :meth:`handle_one_request` once (or, if persistent connections are "
"enabled, multiple times) to handle incoming HTTP requests. You should never "
"need to override it; instead, implement appropriate :meth:`do_\\*` methods."
msgstr ""
":meth:`handle_one_request` を一度だけ (持続的接続が有効になっている場合には複数回) "
"呼び出して、HTTPリクエストを処理します。このメソッドを上書きする必要はまったくありません; そうする代わりに適切な :meth:`do_\\*` "
"を実装してください。"

#: ../../library/http.server.rst:173
msgid ""
"This method will parse and dispatch the request to the appropriate "
":meth:`do_\\*` method.  You should never need to override it."
msgstr ""
"このメソッドはリクエストを解釈し、適切な :meth:`do_\\*` メソッドに転送します。このメソッドを上書きする必要はまったくありません。"

#: ../../library/http.server.rst:178
msgid ""
"When a HTTP/1.1 compliant server receives an ``Expect: 100-continue`` "
"request header it responds back with a ``100 Continue`` followed by ``200 "
"OK`` headers. This method can be overridden to raise an error if the server "
"does not want the client to continue.  For e.g. server can chose to send "
"``417 Expectation Failed`` as a response header and ``return False``."
msgstr ""
"HTTP/1.1 準拠のサーバが ``Expect: 100-continue`` リクエストヘッダを受け取ったとき、 ``100 Continue`` を返し、その後に ``200 OK`` がきます。\n"
"このメソッドは、サーバがクライアントに継続を要求しない場合、エラーを送出するようにオーバーライドできます。\n"
"例えば、サーバはレスポンスヘッダとして ``417 Expectation Failed`` を送る選択をし、 ``return False`` とできます。"

#: ../../library/http.server.rst:189
msgid ""
"Sends and logs a complete error reply to the client. The numeric *code* "
"specifies the HTTP error code, with *message* as an optional, short, human "
"readable description of the error.  The *explain* argument can be used to "
"provide more detailed information about the error; it will be formatted "
"using the :attr:`error_message_format` attribute and emitted, after a "
"complete set of headers, as the response body.  The :attr:`responses` "
"attribute holds the default values for *message* and *explain* that will be "
"used if no value is provided; for unknown codes the default value for both "
"is the string ``???``. The body will be empty if the method is HEAD or the "
"response code is one of the following: ``1xx``, ``204 No Content``, ``205 "
"Reset Content``, ``304 Not Modified``."
msgstr ""

#: ../../library/http.server.rst:201
msgid ""
"The error response includes a Content-Length header. Added the *explain* "
"argument."
msgstr ""

#: ../../library/http.server.rst:207
msgid ""
"Adds a response header to the headers buffer and logs the accepted request. "
"The HTTP response line is written to the internal buffer, followed by "
"*Server* and *Date* headers. The values for these two headers are picked up "
"from the :meth:`version_string` and :meth:`date_time_string` methods, "
"respectively. If the server does not intend to send any other headers using "
"the :meth:`send_header` method, then :meth:`send_response` should be "
"followed by an :meth:`end_headers` call."
msgstr ""

#: ../../library/http.server.rst:216
msgid ""
"Headers are stored to an internal buffer and :meth:`end_headers` needs to be"
" called explicitly."
msgstr ""

#: ../../library/http.server.rst:222
msgid ""
"Adds the HTTP header to an internal buffer which will be written to the "
"output stream when either :meth:`end_headers` or :meth:`flush_headers` is "
"invoked. *keyword* should specify the header keyword, with *value* "
"specifying its value. Note that, after the send_header calls are done, "
":meth:`end_headers` MUST BE called in order to complete the operation."
msgstr ""

#: ../../library/http.server.rst:228
msgid "Headers are stored in an internal buffer."
msgstr "ヘッダは内部バッファに保存されます。"

#: ../../library/http.server.rst:233
msgid ""
"Sends the response header only, used for the purposes when ``100 Continue`` "
"response is sent by the server to the client. The headers not buffered and "
"sent directly the output stream.If the *message* is not specified, the HTTP "
"message corresponding the response *code*  is sent."
msgstr ""

#: ../../library/http.server.rst:242
msgid ""
"Adds a blank line (indicating the end of the HTTP headers in the response) "
"to the headers buffer and calls :meth:`flush_headers()`."
msgstr ""

#: ../../library/http.server.rst:246
msgid "The buffered headers are written to the output stream."
msgstr "バッファされたヘッダは出力ストリームに書き出されます。"

#: ../../library/http.server.rst:251
msgid ""
"Finally send the headers to the output stream and flush the internal headers"
" buffer."
msgstr "最終的にヘッダを出力ストリームに送り、内部ヘッダバッファをフラッシュします。"

#: ../../library/http.server.rst:258
msgid ""
"Logs an accepted (successful) request. *code* should specify the numeric "
"HTTP code associated with the response. If a size of the response is "
"available, then it should be passed as the *size* parameter."
msgstr ""
"受理された (成功した) リクエストをログに記録します。*code* にはこの応答に関連付けられた HTTP "
"コード番号を指定します。応答メッセージの大きさを知ることができる場合、*size* パラメタに渡すとよいでしょう。"

#: ../../library/http.server.rst:264
msgid ""
"Logs an error when a request cannot be fulfilled. By default, it passes the "
"message to :meth:`log_message`, so it takes the same arguments (*format* and"
" additional values)."
msgstr ""
"リクエストを遂行できなかった際に、エラーをログに記録します。標準では、メッセージを :meth:`log_message` に渡します。従って同じ引数 "
"(*format* と追加の値) を取ります。"

#: ../../library/http.server.rst:271
msgid ""
"Logs an arbitrary message to ``sys.stderr``. This is typically overridden to"
" create custom error logging mechanisms. The *format* argument is a standard"
" printf-style format string, where the additional arguments to "
":meth:`log_message` are applied as inputs to the formatting. The client ip "
"address and current date and time are prefixed to every message logged."
msgstr ""
"任意のメッセージを ``sys.stderr`` にログ記録します。このメソッドは通常、カスタムのエラーログ記録機構を作成するために上書きされます。 "
"*format* 引数は標準の printf 形式の書式文字列で、 :meth:`log_message` "
"に渡された追加の引数は書式化の入力として適用されます。ログ記録される全てのメッセージには、クライアントの IP "
"アドレスおよび現在の日付、時刻が先頭に付けられます。"

#: ../../library/http.server.rst:279
msgid ""
"Returns the server software's version string. This is a combination of the "
":attr:`server_version` and :attr:`sys_version` attributes."
msgstr ""

#: ../../library/http.server.rst:284
msgid ""
"Returns the date and time given by *timestamp* (which must be ``None`` or in"
" the format returned by :func:`time.time`), formatted for a message header. "
"If *timestamp* is omitted, it uses the current date and time."
msgstr ""

#: ../../library/http.server.rst:288
msgid "The result looks like ``'Sun, 06 Nov 1994 08:49:37 GMT'``."
msgstr "出力は ``'Sun, 06 Nov 1994 08:49:37 GMT'`` のようになります。"

#: ../../library/http.server.rst:292
msgid "Returns the current date and time, formatted for logging."
msgstr "ログ記録向けに書式化された、現在の日付および時刻を返します。"

#: ../../library/http.server.rst:296
msgid "Returns the client address."
msgstr "クライアントのアドレスを返します。"

#: ../../library/http.server.rst:298
msgid ""
"Previously, a name lookup was performed. To avoid name resolution delays, it"
" now always returns the IP address."
msgstr ""

#: ../../library/http.server.rst:305
msgid ""
"This class serves files from the current directory and below, directly "
"mapping the directory structure to HTTP requests."
msgstr "このクラスは、現在のディレクトリ以下にあるファイルを、HTTP リクエストにおけるディレクトリ構造に直接対応付けて提供します。"

#: ../../library/http.server.rst:308
msgid ""
"A lot of the work, such as parsing the request, is done by the base class "
":class:`BaseHTTPRequestHandler`.  This class implements the :func:`do_GET` "
"and :func:`do_HEAD` functions."
msgstr ""

#: ../../library/http.server.rst:312
msgid ""
"The following are defined as class-level attributes of "
":class:`SimpleHTTPRequestHandler`:"
msgstr ":class:`SimpleHTTPRequestHandler` では以下のメンバ変数を定義しています:"

#: ../../library/http.server.rst:317
msgid ""
"This will be ``\"SimpleHTTP/\" + __version__``, where ``__version__`` is "
"defined at the module level."
msgstr ""
"この値は ``\"SimpleHTTP/\" + __version__`` になります。``__version__`` "
"はこのモジュールで定義されている値です。"

#: ../../library/http.server.rst:322
msgid ""
"A dictionary mapping suffixes into MIME types. The default is signified by "
"an empty string, and is considered to be ``application/octet-stream``. The "
"mapping is used case-insensitively, and so should contain only lower-cased "
"keys."
msgstr ""
"拡張子を MIME 型指定子に対応付ける辞書です。標準の型指定は空文字列で表され、この値は ``application/octet-stream`` "
"と見なされます。対応付けは大小文字の区別をするので、小文字のキーのみを入れるべきです。"

#: ../../library/http.server.rst:327
msgid ""
"The :class:`SimpleHTTPRequestHandler` class defines the following methods:"
msgstr ":class:`SimpleHTTPRequestHandler` では以下のメソッドを定義しています:"

#: ../../library/http.server.rst:331
msgid ""
"This method serves the ``'HEAD'`` request type: it sends the headers it "
"would send for the equivalent ``GET`` request. See the :meth:`do_GET` method"
" for a more complete explanation of the possible headers."
msgstr ""
"このメソッドは ``'HEAD'`` 型のリクエスト処理を実行します: すなわち、 ``GET`` "
"リクエストの時に送信されるものと同じヘッダを送信します。送信される可能性のあるヘッダについての完全な説明は :meth:`do_GET` "
"メソッドを参照してください。"

#: ../../library/http.server.rst:337
msgid ""
"The request is mapped to a local file by interpreting the request as a path "
"relative to the current working directory."
msgstr "リクエストを現在の作業ディレクトリからの相対的なパスとして解釈することで、リクエストをローカルシステム上のファイルと対応付けます。"

#: ../../library/http.server.rst:340
msgid ""
"If the request was mapped to a directory, the directory is checked for a "
"file named ``index.html`` or ``index.htm`` (in that order). If found, the "
"file's contents are returned; otherwise a directory listing is generated by "
"calling the :meth:`list_directory` method. This method uses "
":func:`os.listdir` to scan the directory, and returns a ``404`` error "
"response if the :func:`~os.listdir` fails."
msgstr ""

#: ../../library/http.server.rst:347
msgid ""
"If the request was mapped to a file, it is opened and the contents are "
"returned.  Any :exc:`OSError` exception in opening the requested file is "
"mapped to a ``404``, ``'File not found'`` error. Otherwise, the content type"
" is guessed by calling the :meth:`guess_type` method, which in turn uses the"
" *extensions_map* variable."
msgstr ""

#: ../../library/http.server.rst:353
msgid ""
"A ``'Content-type:'`` header with the guessed content type is output, "
"followed by a ``'Content-Length:'`` header with the file's size and a "
"``'Last-Modified:'`` header with the file's modification time."
msgstr ""
"出力は ``'Content-type:'`` と推測されたコンテントタイプで、その後にファイルサイズを示す ``'Content-Length;'``"
" ヘッダと、ファイルの更新日時を示す ``'Last-Modified:'`` ヘッダが続きます。"

#: ../../library/http.server.rst:357
msgid ""
"Then follows a blank line signifying the end of the headers, and then the "
"contents of the file are output. If the file's MIME type starts with "
"``text/`` the file is opened in text mode; otherwise binary mode is used."
msgstr ""
"そしてヘッダの終了を示す空白行が続き、さらにその後にファイルの内容が続きます。このファイルはコンテントタイプが ``text/`` "
"で始まっている場合はテキストモードで、そうでなければバイナリモードで開かれます。"

#: ../../library/http.server.rst:361
msgid ""
"For example usage, see the implementation of the :func:`test` function "
"invocation in the :mod:`http.server` module."
msgstr ""

#: ../../library/http.server.rst:365
msgid ""
"The :class:`SimpleHTTPRequestHandler` class can be used in the following "
"manner in order to create a very basic webserver serving files relative to "
"the current directory::"
msgstr ""

#: ../../library/http.server.rst:382
msgid ""
":mod:`http.server` can also be invoked directly using the :option:`-m` "
"switch of the interpreter with a ``port number`` argument.  Similar to the "
"previous example, this serves files relative to the current directory::"
msgstr ""

#: ../../library/http.server.rst:388
msgid ""
"By default, server binds itself to all interfaces.  The option ``-b/--bind``"
" specifies a specific address to which it should bind.  For example, the "
"following command causes the server to bind to localhost only::"
msgstr ""

#: ../../library/http.server.rst:394
msgid "``--bind`` argument was introduced."
msgstr "``--bind`` 引数が導入されました。"

#: ../../library/http.server.rst:400
msgid ""
"This class is used to serve either files or output of CGI scripts from the "
"current directory and below. Note that mapping HTTP hierarchic structure to "
"local directory structure is exactly as in "
":class:`SimpleHTTPRequestHandler`."
msgstr ""

#: ../../library/http.server.rst:406
msgid ""
"CGI scripts run by the :class:`CGIHTTPRequestHandler` class cannot execute "
"redirects (HTTP code 302), because code 200 (script output follows) is sent "
"prior to execution of the CGI script.  This pre-empts the status code."
msgstr ""
":class:`CGIHTTPRequestHandler` クラスで実行される CGI スクリプトは HTTP コード 200 "
"(スクリプトの出力が後に続く) を実行に先立って出力される (これがステータスコードになります) ため、リダイレクト(コード302) "
"を行なうことができません。"

#: ../../library/http.server.rst:411
msgid ""
"The class will however, run the CGI script, instead of serving it as a file,"
" if it guesses it to be a CGI script.  Only directory-based CGI are used ---"
" the other common server configuration is to treat special extensions as "
"denoting CGI scripts."
msgstr ""

#: ../../library/http.server.rst:416
msgid ""
"The :func:`do_GET` and :func:`do_HEAD` functions are modified to run CGI "
"scripts and serve the output, instead of serving files, if the request leads"
" to somewhere below the ``cgi_directories`` path."
msgstr ""
":func:`do_GET` および :func:`do_HEAD` 関数は、HTTP 要求が ``cgi_directories`` "
"パス以下のどこかを指している場合、ファイルを提供するのではなく、CGI スクリプトを実行してその出力を提供するように変更されています。"

#: ../../library/http.server.rst:420
msgid "The :class:`CGIHTTPRequestHandler` defines the following data member:"
msgstr ":class:`CGIHTTPRequestHandler` では以下のデータメンバを定義しています:"

#: ../../library/http.server.rst:424
msgid ""
"This defaults to ``['/cgi-bin', '/htbin']`` and describes directories to "
"treat as containing CGI scripts."
msgstr ""
"この値は標準で ``['/cgi-bin', '/htbin']`` であり、CGI スクリプトを含んでいることを示すディレクトリを記述します。"

#: ../../library/http.server.rst:427
msgid "The :class:`CGIHTTPRequestHandler` defines the following method:"
msgstr ":class:`CGIHTTPRequestHandler` は以下のメソッドを定義しています:"

#: ../../library/http.server.rst:431
msgid ""
"This method serves the ``'POST'`` request type, only allowed for CGI "
"scripts.  Error 501, \"Can only POST to CGI scripts\", is output when trying"
" to POST to a non-CGI url."
msgstr ""
"このメソッドは、CGI スクリプトでのみ許されている ``'POST'`` 型の HTTP 要求に対するサービスを行います。CGI でない url "
"に対して POST を試みた場合、出力は Error 501, \"Can only POST to CGI scripts\" になります。"

#: ../../library/http.server.rst:435
msgid ""
"Note that CGI scripts will be run with UID of user nobody, for security "
"reasons.  Problems with the CGI script will be translated to error 403."
msgstr ""

#: ../../library/http.server.rst:438
msgid ""
":class:`CGIHTTPRequestHandler` can be enabled in the command line by passing"
" the ``--cgi`` option::"
msgstr ""
