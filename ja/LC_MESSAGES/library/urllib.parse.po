# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-05 15:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Osamu NAKAMURA, 2017\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/urllib.parse.rst:2
msgid ":mod:`urllib.parse` --- Parse URLs into components"
msgstr ":mod:`urllib.parse` --- URL を解析して構成要素にする"

#: ../../library/urllib.parse.rst:7
msgid "**Source code:** :source:`Lib/urllib/parse.py`"
msgstr "**ソースコード:** :source:`Lib/urllib/parse.py`"

#: ../../library/urllib.parse.rst:18
msgid ""
"This module defines a standard interface to break Uniform Resource Locator "
"(URL) strings up in components (addressing scheme, network location, path "
"etc.), to combine the components back into a URL string, and to convert a "
"\"relative URL\" to an absolute URL given a \"base URL.\""
msgstr ""
"このモジュールでは URL (Uniform Resource Locator) 文字列をその構成要素 "
"(アドレススキーム、ネットワーク上の位置、パスその他) に分解したり、構成要素を URL に組みなおしたり、 \"相対 URL (relative "
"URL)\" を指定した \"基底 URL (base URL)\" に基づいて絶対 URL に変換するための標準的なインタフェースを定義しています。"

#: ../../library/urllib.parse.rst:23
msgid ""
"The module has been designed to match the Internet RFC on Relative Uniform "
"Resource Locators. It supports the following URL schemes: ``file``, ``ftp``,"
" ``gopher``, ``hdl``, ``http``, ``https``, ``imap``, ``mailto``, ``mms``, "
"``news``, ``nntp``, ``prospero``, ``rsync``, ``rtsp``, ``rtspu``, ``sftp``, "
"``shttp``, ``sip``, ``sips``, ``snews``, ``svn``, ``svn+ssh``, ``telnet``, "
"``wais``, ``ws``, ``wss``."
msgstr ""
"このモジュールは Relative Uniform Resource Locators (相対 URL) に関するインターネット RFC "
"に適合するよう設計されており、次の URL スキームをサポートしています: ``file``, ``ftp``, ``gopher``, "
"``hdl``, ``http``, ``https``, ``imap``, ``mailto``, ``mms``, ``news``, "
"``nntp``, ``prospero``, ``rsync``, ``rtsp``, ``rtspu``, ``sftp``, ``shttp``,"
" ``sip``, ``sips``, ``snews``, ``svn``, ``svn+ssh``, ``telnet``, ``wais``, "
"``ws``, ``wss``"

#: ../../library/urllib.parse.rst:30
msgid ""
"The :mod:`urllib.parse` module defines functions that fall into two broad "
"categories: URL parsing and URL quoting. These are covered in detail in the "
"following sections."
msgstr ""
":mod:`urllib.parse` モジュールは、大きく分けると URL の解析を行う関数と URL "
"のクオートを行う関数を定義しています。以下にこれらの詳細を説明します。"

#: ../../library/urllib.parse.rst:35
msgid "URL Parsing"
msgstr "URL の解析"

#: ../../library/urllib.parse.rst:37
msgid ""
"The URL parsing functions focus on splitting a URL string into its "
"components, or on combining URL components into a URL string."
msgstr "URL 解析関数は、URL 文字列を各構成要素に分割するか、あるいは URL の構成要素を組み合わせて URL 文字列を生成します。"

#: ../../library/urllib.parse.rst:42
msgid ""
"Parse a URL into six components, returning a 6-tuple.  This corresponds to "
"the general structure of a URL: "
"``scheme://netloc/path;parameters?query#fragment``. Each tuple item is a "
"string, possibly empty. The components are not broken up in smaller parts "
"(for example, the network location is a single string), and % escapes are "
"not expanded. The delimiters as shown above are not part of the result, "
"except for a leading slash in the *path* component, which is retained if "
"present.  For example:"
msgstr ""
"URL を解析して 6 つの構成要素にし、6 要素のタプルを返します。このタプルは URL の一般的な構造: "
"``scheme://netloc/path;parameters?query#fragment`` "
"に対応しています。各タプル要素は文字列で、空の場合もあります。構成要素がさらに小さい要素に分解されることはありません "
"(例えばネットワーク上の位置は単一の文字列になります)。また % "
"によるエスケープは展開されません。上で示された区切り文字がタプルの各要素の一部分として含まれることはありませんが、*path* "
"要素の先頭のスラッシュがある場合には例外です。たとえば以下のようになります:"

#: ../../library/urllib.parse.rst:62
msgid ""
"Following the syntax specifications in :rfc:`1808`, urlparse recognizes a "
"netloc only if it is properly introduced by '//'.  Otherwise the input is "
"presumed to be a relative URL and thus to start with a path component."
msgstr ""
":rfc:`1808` にある文法仕様に基づき、urlparse は '//' で始まる場合にのみ netloc "
"を認識します。それ以外の場合は、入力は相対URLであると推定され、path 部分で始まることになります。"

#: ../../library/urllib.parse.rst:78
msgid ""
"The *scheme* argument gives the default addressing scheme, to be used only "
"if the URL does not specify one.  It should be the same type (text or bytes)"
" as *urlstring*, except that the default value ``''`` is always allowed, and"
" is automatically converted to ``b''`` if appropriate."
msgstr ""
"*scheme* 引数によってデフォルトのアドレススキームを与えると、アドレススキームを指定していない URL "
"のみに使用されます。常に許されるデフォルトの ``''`` (``b''`` に自動変換出来る)を除き、 *urlstring* "
"と同じ型(テキストもしくはバイト列)であるべきです。"

#: ../../library/urllib.parse.rst:83
msgid ""
"If the *allow_fragments* argument is false, fragment identifiers are not "
"recognized.  Instead, they are parsed as part of the path, parameters or "
"query component, and :attr:`fragment` is set to the empty string in the "
"return value."
msgstr ""
"引数 *allow_fragments* が false "
"の場合、フラグメント識別子は認識されません。その代わり、それはパス、パラメータ、またはクエリ要素の一部として解析され、戻り値の "
":attr:`fragment` は空文字に設定されます。"

#: ../../library/urllib.parse.rst:88 ../../library/urllib.parse.rst:212
#: ../../library/urllib.parse.rst:300
msgid ""
"The return value is actually an instance of a subclass of :class:`tuple`.  "
"This class has the following additional read-only convenience attributes:"
msgstr ""
"戻り値は実際には :class:`tuple` のサブクラスのインスタンスです。このクラスには以下の読み出し専用の便利な属性が追加されています:"

#: ../../library/urllib.parse.rst:92 ../../library/urllib.parse.rst:216
#: ../../library/urllib.parse.rst:304
msgid "Attribute"
msgstr "属性"

#: ../../library/urllib.parse.rst:92 ../../library/urllib.parse.rst:216
#: ../../library/urllib.parse.rst:304
msgid "Index"
msgstr "インデックス"

#: ../../library/urllib.parse.rst:92 ../../library/urllib.parse.rst:216
#: ../../library/urllib.parse.rst:304
msgid "Value"
msgstr "値"

#: ../../library/urllib.parse.rst:92 ../../library/urllib.parse.rst:216
#: ../../library/urllib.parse.rst:304
msgid "Value if not present"
msgstr "指定されなかった場合の値"

#: ../../library/urllib.parse.rst:94 ../../library/urllib.parse.rst:218
msgid ":attr:`scheme`"
msgstr ":attr:`scheme`"

#: ../../library/urllib.parse.rst:94 ../../library/urllib.parse.rst:218
#: ../../library/urllib.parse.rst:306
msgid "0"
msgstr "0"

#: ../../library/urllib.parse.rst:94 ../../library/urllib.parse.rst:218
msgid "URL scheme specifier"
msgstr "URL スキーム"

#: ../../library/urllib.parse.rst:94 ../../library/urllib.parse.rst:218
msgid "*scheme* parameter"
msgstr "*scheme* パラメータ"

#: ../../library/urllib.parse.rst:96 ../../library/urllib.parse.rst:220
msgid ":attr:`netloc`"
msgstr ":attr:`netloc`"

#: ../../library/urllib.parse.rst:96 ../../library/urllib.parse.rst:220
#: ../../library/urllib.parse.rst:308
msgid "1"
msgstr "1"

#: ../../library/urllib.parse.rst:96 ../../library/urllib.parse.rst:220
msgid "Network location part"
msgstr "ネットワーク上の位置"

#: ../../library/urllib.parse.rst:96 ../../library/urllib.parse.rst:98
#: ../../library/urllib.parse.rst:100 ../../library/urllib.parse.rst:103
#: ../../library/urllib.parse.rst:105 ../../library/urllib.parse.rst:220
#: ../../library/urllib.parse.rst:222 ../../library/urllib.parse.rst:224
#: ../../library/urllib.parse.rst:226 ../../library/urllib.parse.rst:306
#: ../../library/urllib.parse.rst:308
msgid "empty string"
msgstr "空文字列"

#: ../../library/urllib.parse.rst:98 ../../library/urllib.parse.rst:222
msgid ":attr:`path`"
msgstr ":attr:`path`"

#: ../../library/urllib.parse.rst:98 ../../library/urllib.parse.rst:222
msgid "2"
msgstr "2"

#: ../../library/urllib.parse.rst:98 ../../library/urllib.parse.rst:222
msgid "Hierarchical path"
msgstr "階層的パス"

#: ../../library/urllib.parse.rst:100
msgid ":attr:`params`"
msgstr ":attr:`params`"

#: ../../library/urllib.parse.rst:100 ../../library/urllib.parse.rst:224
msgid "3"
msgstr "3"

#: ../../library/urllib.parse.rst:100
msgid "Parameters for last path element"
msgstr "最後のパス要素に対するパラメータ"

#: ../../library/urllib.parse.rst:103 ../../library/urllib.parse.rst:224
msgid ":attr:`query`"
msgstr ":attr:`query`"

#: ../../library/urllib.parse.rst:103 ../../library/urllib.parse.rst:226
msgid "4"
msgstr "4"

#: ../../library/urllib.parse.rst:103 ../../library/urllib.parse.rst:224
msgid "Query component"
msgstr "クエリ要素"

#: ../../library/urllib.parse.rst:105 ../../library/urllib.parse.rst:226
#: ../../library/urllib.parse.rst:308
msgid ":attr:`fragment`"
msgstr ":attr:`fragment`"

#: ../../library/urllib.parse.rst:105
msgid "5"
msgstr "5"

#: ../../library/urllib.parse.rst:105 ../../library/urllib.parse.rst:226
#: ../../library/urllib.parse.rst:308
msgid "Fragment identifier"
msgstr "フラグメント識別子"

#: ../../library/urllib.parse.rst:107 ../../library/urllib.parse.rst:228
msgid ":attr:`username`"
msgstr ":attr:`username`"

#: ../../library/urllib.parse.rst:107 ../../library/urllib.parse.rst:228
msgid "User name"
msgstr "ユーザ名"

#: ../../library/urllib.parse.rst:107 ../../library/urllib.parse.rst:109
#: ../../library/urllib.parse.rst:111 ../../library/urllib.parse.rst:113
#: ../../library/urllib.parse.rst:228 ../../library/urllib.parse.rst:230
#: ../../library/urllib.parse.rst:232 ../../library/urllib.parse.rst:234
msgid ":const:`None`"
msgstr ":const:`None`"

#: ../../library/urllib.parse.rst:109 ../../library/urllib.parse.rst:230
msgid ":attr:`password`"
msgstr ":attr:`password`"

#: ../../library/urllib.parse.rst:109 ../../library/urllib.parse.rst:230
msgid "Password"
msgstr "パスワード"

#: ../../library/urllib.parse.rst:111 ../../library/urllib.parse.rst:232
msgid ":attr:`hostname`"
msgstr ":attr:`hostname`"

#: ../../library/urllib.parse.rst:111 ../../library/urllib.parse.rst:232
msgid "Host name (lower case)"
msgstr "ホスト名 (小文字)"

#: ../../library/urllib.parse.rst:113 ../../library/urllib.parse.rst:234
msgid ":attr:`port`"
msgstr ":attr:`port`"

#: ../../library/urllib.parse.rst:113 ../../library/urllib.parse.rst:234
msgid "Port number as integer, if present"
msgstr "ポート番号を表わす整数 (もしあれば)"

#: ../../library/urllib.parse.rst:117 ../../library/urllib.parse.rst:238
msgid ""
"Reading the :attr:`port` attribute will raise a :exc:`ValueError` if an "
"invalid port is specified in the URL.  See section :ref:`urlparse-result-"
"object` for more information on the result object."
msgstr ""
"URL中で不正なポートが指定されている場合、 :attr:`port` 属性を読みだすと、:exc:`ValueError` "
"を送出します。結果オブジェクトのより詳しい情報は :ref:`urlparse-result-object` 節を参照してください。"

#: ../../library/urllib.parse.rst:121 ../../library/urllib.parse.rst:242
msgid ""
"Unmatched square brackets in the :attr:`netloc` attribute will raise a "
":exc:`ValueError`."
msgstr ":attr:`netloc` 属性にマッチしなかった角括弧があると :exc:`ValueError` を送出します。"

#: ../../library/urllib.parse.rst:124
msgid "Added IPv6 URL parsing capabilities."
msgstr "IPv6 URL の解析も行えるようになりました。"

#: ../../library/urllib.parse.rst:127
msgid ""
"The fragment is now parsed for all URL schemes (unless *allow_fragment* is "
"false), in accordance with :rfc:`3986`.  Previously, a whitelist of schemes "
"that support fragments existed."
msgstr ""
":rfc:`3986` に従い、fragment はすべての URL スキームに対して解析されるようになりました (*allow_fragment* "
"が偽の場合は除く)。"

#: ../../library/urllib.parse.rst:132 ../../library/urllib.parse.rst:245
msgid ""
"Out-of-range port numbers now raise :exc:`ValueError`, instead of returning "
":const:`None`."
msgstr ""
"範囲外のポート番号を指定すると、 :const:`None` を返す代わりに、:exc:`ValueError` を送出するようになりました。"

#: ../../library/urllib.parse.rst:139
msgid ""
"Parse a query string given as a string argument (data of type "
":mimetype:`application/x-www-form-urlencoded`).  Data are returned as a "
"dictionary.  The dictionary keys are the unique query variable names and the"
" values are lists of values for each name."
msgstr ""
"文字列引数として渡されたクエリ文字列  (:mimetype:`application/x-www-form-urlencoded` 型のデータ) "
"を解析します。解析されたデータを辞書として返します。辞書のキーは一意なクエリ変数名で、値は各変数名に対する値からなるリストです。"

#: ../../library/urllib.parse.rst:144 ../../library/urllib.parse.rst:173
msgid ""
"The optional argument *keep_blank_values* is a flag indicating whether blank"
" values in percent-encoded queries should be treated as blank strings. A "
"true value indicates that blanks should be retained as  blank strings.  The "
"default false value indicates that blank values are to be ignored and "
"treated as if they were not included."
msgstr ""
"任意の引数 *keep_blank_values* "
"は、パーセントエンコードされたクエリの中の値が入っていないクエリの値を空白文字列と見なすかどうかを示すフラグです。値が真であれば、値の入っていないフィールドは空文字列のままになります。標準では偽で、値の入っていないフィールドを無視し、そのフィールドはクエリに含まれていないものとして扱います。"

#: ../../library/urllib.parse.rst:150 ../../library/urllib.parse.rst:179
msgid ""
"The optional argument *strict_parsing* is a flag indicating what to do with "
"parsing errors.  If false (the default), errors are silently ignored.  If "
"true, errors raise a :exc:`ValueError` exception."
msgstr ""
"任意の引数 *strict_parsing* はパース時のエラーをどう扱うかを決めるフラグです。値が偽なら "
"(デフォルトの設定です)、エラーは暗黙のうちに無視します。値が真なら :exc:`ValueError` 例外を送出します。"

#: ../../library/urllib.parse.rst:154 ../../library/urllib.parse.rst:183
msgid ""
"The optional *encoding* and *errors* parameters specify how to decode "
"percent-encoded sequences into Unicode characters, as accepted by the "
":meth:`bytes.decode` method."
msgstr ""
"任意のパラメータ *encoding* および *errors* はパーセントエンコードされたシーケンスを Unicode "
"文字にデコードする方法を指定します。これは :meth:`bytes.decode` メソッドに渡されます。"

#: ../../library/urllib.parse.rst:158
msgid ""
"Use the :func:`urllib.parse.urlencode` function (with the ``doseq`` "
"parameter set to ``True``) to convert such dictionaries into query strings."
msgstr ""
"このような辞書をクエリ文字列に変換するには :func:`urllib.parse.urlencode` 関数を (``doseq`` パラメータに "
"``True`` を指定して) 使用します。"

#: ../../library/urllib.parse.rst:163 ../../library/urllib.parse.rst:190
msgid "Add *encoding* and *errors* parameters."
msgstr "*encoding* および *errors* パラメータが追加されました。"

#: ../../library/urllib.parse.rst:169
msgid ""
"Parse a query string given as a string argument (data of type "
":mimetype:`application/x-www-form-urlencoded`).  Data are returned as a list"
" of name, value pairs."
msgstr ""
"文字列引数として渡されたクエリ文字列 (:mimetype:`application/x-www-form-urlencoded` 型のデータ) "
"を解析します。解析されたデータは名前と値のペアからなるリストです。"

#: ../../library/urllib.parse.rst:187
msgid ""
"Use the :func:`urllib.parse.urlencode` function to convert such lists of "
"pairs into query strings."
msgstr "ペアのリストからクエリ文字列を生成する場合には :func:`urllib.parse.urlencode` 関数を使用します。"

#: ../../library/urllib.parse.rst:196
msgid ""
"Construct a URL from a tuple as returned by ``urlparse()``. The *parts* "
"argument can be any six-item iterable. This may result in a slightly "
"different, but equivalent URL, if the URL that was parsed originally had "
"unnecessary delimiters (for example, a ``?`` with an empty query; the RFC "
"states that these are equivalent)."
msgstr ""
"``urlparse()`` が返すような形式のタプルから URL を構築します。*parts* 引数は任意の 6 要素イテラブルです。解析された元の "
"URL が、不要な区切り文字を持っていた場合には、多少違いはあるが等価な URL になるかもしれません (例えばクエリ内容が空の ``?`` "
"のようなもので、RFC はこれらを等価だと述べています)。"

#: ../../library/urllib.parse.rst:205
msgid ""
"This is similar to :func:`urlparse`, but does not split the params from the "
"URL. This should generally be used instead of :func:`urlparse` if the more "
"recent URL syntax allowing parameters to be applied to each segment of the "
"*path* portion of the URL (see :rfc:`2396`) is wanted.  A separate function "
"is needed to separate the path segments and parameters.  This function "
"returns a 5-tuple: (addressing scheme, network location, path, query, "
"fragment identifier)."
msgstr ""
":func:`urlparse` に似ていますが、URL から params を切り離しません。このメソッドは通常、URL の *path* "
"部分において、各セグメントにパラメータ指定をできるようにした最近の URL 構文 (:rfc:`2396` 参照) が必要な場合に、 "
":func:`urlparse` の代わりに使われます。パスセグメントとパラメータを分割するためには分割用の関数が必要です。この関数は 5 "
"要素のタプル: (アドレススキーム、ネットワーク上の位置、パス、クエリ、フラグメント識別子)  を返します。"

#: ../../library/urllib.parse.rst:252
msgid ""
"Combine the elements of a tuple as returned by :func:`urlsplit` into a "
"complete URL as a string. The *parts* argument can be any five-item "
"iterable. This may result in a slightly different, but equivalent URL, if "
"the URL that was parsed originally had unnecessary delimiters (for example, "
"a ? with an empty query; the RFC states that these are equivalent)."
msgstr ""
":func:`urlsplit` が返すような形式のタプル中のエレメントを組み合わせて、文字列の完全な URL にします。 *parts* 引数は任意の"
" 5 要素イテラブルです。解析された元の URL が、不要な区切り文字を持っていた場合には、多少違いはあるが等価な URL になるかもしれません "
"(例えばクエリ内容が空の ? のようなもので、RFC はこれらを等価だと述べています)。"

#: ../../library/urllib.parse.rst:261
msgid ""
"Construct a full (\"absolute\") URL by combining a \"base URL\" (*base*) "
"with another URL (*url*).  Informally, this uses components of the base URL,"
" in particular the addressing scheme, the network location and (part of) the"
" path, to provide missing components in the relative URL.  For example:"
msgstr ""
"\"基底 URL\"(*base*)と別のURL(*url*)を組み合わせて、完全な URL (\"絶対 URL\") "
"を構成します。くだけて言えば、この関数は相対 URL にない要素を提供するために基底 URL "
"の要素、特にアドレススキーム、ネットワーク上の位置、およびパス (の一部) を使います。例えば:"

#: ../../library/urllib.parse.rst:270
msgid ""
"The *allow_fragments* argument has the same meaning and default as for "
":func:`urlparse`."
msgstr "*allow_fragments* 引数は :func:`urlparse` における引数と同じ意味とデフォルトを持ちます。"

#: ../../library/urllib.parse.rst:275
msgid ""
"If *url* is an absolute URL (that is, starting with ``//`` or "
"``scheme://``), the *url*'s host name and/or scheme will be present in the "
"result.  For example:"
msgstr ""
"*url* が (``//`` か ``scheme://`` で始まっている) 絶対URLであれば、その *url* のホスト名と / もしくは "
"scheme は結果に反映されます。例えば:"

#: ../../library/urllib.parse.rst:284
msgid ""
"If you do not want that behavior, preprocess the *url* with :func:`urlsplit`"
" and :func:`urlunsplit`, removing possible *scheme* and *netloc* parts."
msgstr ""
"もしこの動作が望みのものでない場合は、 *url* を :func:`urlsplit` と :func:`urlunsplit` で先に処理して、 "
"*scheme* と *netloc* を削除してください。"

#: ../../library/urllib.parse.rst:290
msgid "Behaviour updated to match the semantics defined in :rfc:`3986`."
msgstr ":rfc:`3986` で定義された意味論とマッチするように挙動がアップデートされました。"

#: ../../library/urllib.parse.rst:295
msgid ""
"If *url* contains a fragment identifier, return a modified version of *url* "
"with no fragment identifier, and the fragment identifier as a separate "
"string.  If there is no fragment identifier in *url*, return *url* "
"unmodified and an empty string."
msgstr ""
"*url* がフラグメント識別子を含む場合、フラグメント識別子を持たないバージョンに修正された *url* "
"と、別の文字列に分割されたフラグメント識別子を返します。*url* 中にフラグメント識別子がない場合、そのままの *url* と空文字列を返します。"

#: ../../library/urllib.parse.rst:306
msgid ":attr:`url`"
msgstr ":attr:`url`"

#: ../../library/urllib.parse.rst:306
msgid "URL with no fragment"
msgstr "フラグメントのない URL"

#: ../../library/urllib.parse.rst:311
msgid ""
"See section :ref:`urlparse-result-object` for more information on the result"
" object."
msgstr "結果オブジェクトのより詳しい情報は :ref:`urlparse-result-object` 節を参照してください。"

#: ../../library/urllib.parse.rst:314
msgid "Result is a structured object rather than a simple 2-tuple."
msgstr "結果はシンプルな 2 要素のタプルから構造化オブジェクトに変更されました。"

#: ../../library/urllib.parse.rst:320
msgid "Parsing ASCII Encoded Bytes"
msgstr "ASCII エンコードバイト列の解析"

#: ../../library/urllib.parse.rst:322
msgid ""
"The URL parsing functions were originally designed to operate on character "
"strings only. In practice, it is useful to be able to manipulate properly "
"quoted and encoded URLs as sequences of ASCII bytes. Accordingly, the URL "
"parsing functions in this module all operate on :class:`bytes` and "
":class:`bytearray` objects in addition to :class:`str` objects."
msgstr ""
"URL を解析する関数は元々文字列のみ操作するよう設計されていました。実際のところ、それは URL が正しくクオートされエンコードされた ASCII "
"バイト列を操作できた方が有用でした。結果的にこのモジュールの URL 解析関数はすべて :class:`bytes` および "
":class:`bytearray` オブジェクトに加えて :class:`str` オブジェクトでも処理するようになりました。"

#: ../../library/urllib.parse.rst:328
msgid ""
"If :class:`str` data is passed in, the result will also contain only "
":class:`str` data. If :class:`bytes` or :class:`bytearray` data is passed "
"in, the result will contain only :class:`bytes` data."
msgstr ""
":class:`str` データが渡された場合、戻り値は :class:`str` データのみを含んだものになります。:class:`bytes` "
"あるいは :class:`bytearray` が渡された場合、戻り値は :class:`bytes` データのみを含んだものになります。"

#: ../../library/urllib.parse.rst:332
msgid ""
"Attempting to mix :class:`str` data with :class:`bytes` or "
":class:`bytearray` in a single function call will result in a "
":exc:`TypeError` being raised, while attempting to pass in non-ASCII byte "
"values will trigger :exc:`UnicodeDecodeError`."
msgstr ""
"単一の関数を呼び出す時に :class:`bytes` または :class:`bytearray` が混在した :class:`str` "
"を渡した場合、:exc:`TypeError` が、非 ASCII バイト値が渡された場合 :exc:`UnicodeDecodeError` "
"が送出されます。"

#: ../../library/urllib.parse.rst:337
msgid ""
"To support easier conversion of result objects between :class:`str` and "
":class:`bytes`, all return values from URL parsing functions provide either "
"an :meth:`encode` method (when the result contains :class:`str` data) or a "
":meth:`decode` method (when the result contains :class:`bytes` data). The "
"signatures of these methods match those of the corresponding :class:`str` "
"and :class:`bytes` methods (except that the default encoding is ``'ascii'`` "
"rather than ``'utf-8'``). Each produces a value of a corresponding type that"
" contains either :class:`bytes` data (for :meth:`encode` methods) or "
":class:`str` data (for :meth:`decode` methods)."
msgstr ""
":class:`str` と :class:`bytes` 間で容易に変換を行えるよう、すべての URL 解析関数は :meth:`encode` "
"メソッド (結果に :class:`str` データが含まれる時用) か :meth:`decode` メソッド (結果に :class:`bytes`"
" データが含まれる時用) のどちらかを提供しています。これらメソッドの動作は対応する :class:`str` と :class:`bytes` "
"メソッドが持つものと同じです (ただしデフォルトのエンコーディングは ``'utf-8'`` ではなく ``'ascii'`` になります)。それぞれは"
" :meth:`encode` メソッドを持つ :class:`bytes` データか :meth:`decode` メソッドを持つ "
":class:`str` データのどちらかに対応した型を生成します。"

#: ../../library/urllib.parse.rst:348
msgid ""
"Applications that need to operate on potentially improperly quoted URLs that"
" may contain non-ASCII data will need to do their own decoding from bytes to"
" characters before invoking the URL parsing methods."
msgstr ""
"非 ASCII データを含むなど、不適切にクオートされた URL を操作する可能性のあるアプリケーションでは、URL "
"解析メソッドを呼び出す前に独自にバイト列から文字列にデコードする必要があります。"

#: ../../library/urllib.parse.rst:352
msgid ""
"The behaviour described in this section applies only to the URL parsing "
"functions. The URL quoting functions use their own rules when producing or "
"consuming byte sequences as detailed in the documentation of the individual "
"URL quoting functions."
msgstr ""
"この項で説明された挙動は URL 解析関数にのみ該当します。URL クオート関数でバイトシーケンスを生成もしくは消化する際には、別にURL "
"クオート関数の項で詳説されている通りのルールに従います。"

#: ../../library/urllib.parse.rst:357
msgid "URL parsing functions now accept ASCII encoded byte sequences"
msgstr "URL 解析関数は ASCII エンコードバイトシーケンスも受け付けるようになりました"

#: ../../library/urllib.parse.rst:364
msgid "Structured Parse Results"
msgstr "構造化された解析結果"

#: ../../library/urllib.parse.rst:366
msgid ""
"The result objects from the :func:`urlparse`, :func:`urlsplit`  and "
":func:`urldefrag` functions are subclasses of the :class:`tuple` type. These"
" subclasses add the attributes listed in the documentation for those "
"functions, the encoding and decoding support described in the previous "
"section, as well as an additional method:"
msgstr ""
":func:`urlparse`、:func:`urlsplit`、および :func:`urldefrag` 関数が返すオブジェクトは "
":class:`tuple` "
"型のサブクラスになります。これらサブクラスにはそれぞれの関数で説明されている属性が追加されており、前述のとおりエンコーディングとデコーディングをサポートしています:"

#: ../../library/urllib.parse.rst:374
msgid ""
"Return the re-combined version of the original URL as a string. This may "
"differ from the original URL in that the scheme may be normalized to lower "
"case and empty components may be dropped. Specifically, empty parameters, "
"queries, and fragment identifiers will be removed."
msgstr ""
"オリジナルの URL を再結合した場合は文字列で返されます。これはスキームが小文字に正規化されていたり、空の構成要素が除去されるなど、オリジナルの "
"URL とは異なる場合があります。特に、空のパラメータ、クエリ、およびフラグメント識別子は削除されます。"

#: ../../library/urllib.parse.rst:379
msgid ""
"For :func:`urldefrag` results, only empty fragment identifiers will be "
"removed. For :func:`urlsplit` and :func:`urlparse` results, all noted "
"changes will be made to the URL returned by this method."
msgstr ""
":func:`urldefrag` の戻り値では、空のフラグメント識別子のみ削除されます。:func:`urlsplit` および "
":func:`urlparse` の戻り値では、このメソッドが返す URL には説明されているすべての変更が加えられます。"

#: ../../library/urllib.parse.rst:383
msgid ""
"The result of this method remains unchanged if passed back through the "
"original parsing function:"
msgstr "加えた解析関数を逆に行えばこのメソッドの戻り値は元の URL になります:"

#: ../../library/urllib.parse.rst:396
msgid ""
"The following classes provide the implementations of the structured parse "
"results when operating on :class:`str` objects:"
msgstr "以下のクラスは :class:`str` オブジェクトを操作した場合、構造化された解析結果の実装を提供します:"

#: ../../library/urllib.parse.rst:401
msgid ""
"Concrete class for :func:`urldefrag` results containing :class:`str` data. "
"The :meth:`encode` method returns a :class:`DefragResultBytes` instance."
msgstr ""
":func:`urldefrag` の具象クラスの結果には :class:`str` データが含まれます。:meth:`encode` メソッドは "
":class:`DefragResultBytes` インスタンスを返します。"

#: ../../library/urllib.parse.rst:409
msgid ""
"Concrete class for :func:`urlparse` results containing :class:`str` data. "
"The :meth:`encode` method returns a :class:`ParseResultBytes` instance."
msgstr ""
":func:`urlparse` の具象クラスの結果には :class:`str` データが含まれます。:meth:`encode` メソッドは "
":class:`ParseResultBytes` インスタンスを返します。"

#: ../../library/urllib.parse.rst:415
msgid ""
"Concrete class for :func:`urlsplit` results containing :class:`str` data. "
"The :meth:`encode` method returns a :class:`SplitResultBytes` instance."
msgstr ""
":func:`urlsplit` の具象クラスの結果には :class:`str` データが含まれます。:meth:`encode` メソッドは "
":class:`SplitResultBytes` インスタンスを返します。"

#: ../../library/urllib.parse.rst:420
msgid ""
"The following classes provide the implementations of the parse results when "
"operating on :class:`bytes` or :class:`bytearray` objects:"
msgstr ""
"以下のクラスは :class:`bytes` または :class:`bytearray` オブジェクトを操作した時に解析結果の実装を提供します:"

#: ../../library/urllib.parse.rst:425
msgid ""
"Concrete class for :func:`urldefrag` results containing :class:`bytes` data."
" The :meth:`decode` method returns a :class:`DefragResult` instance."
msgstr ""
":func:`urldefrag` の具象クラスの結果には :class:`bytes` データが含まれます。:meth:`decode` メソッドは "
":class:`DefragResult` インスタンスを返します。"

#: ../../library/urllib.parse.rst:433
msgid ""
"Concrete class for :func:`urlparse` results containing :class:`bytes` data. "
"The :meth:`decode` method returns a :class:`ParseResult` instance."
msgstr ""
":func:`urlparse` の具象クラスの結果には :class:`bytes` が含まれます。:meth:`decode` メソッドは "
":class:`ParseResult` インスタンスを返します。"

#: ../../library/urllib.parse.rst:441
msgid ""
"Concrete class for :func:`urlsplit` results containing :class:`bytes` data. "
"The :meth:`decode` method returns a :class:`SplitResult` instance."
msgstr ""
":func:`urlsplit` の具象クラスの結果には :class:`bytes` データが含まれます。:meth:`decode` メソッドは "
":class:`SplitResult` インスタンスを返します。"

#: ../../library/urllib.parse.rst:449
msgid "URL Quoting"
msgstr "URL のクオート"

#: ../../library/urllib.parse.rst:451
msgid ""
"The URL quoting functions focus on taking program data and making it safe "
"for use as URL components by quoting special characters and appropriately "
"encoding non-ASCII text. They also support reversing these operations to "
"recreate the original data from the contents of a URL component if that task"
" isn't already covered by the URL parsing functions above."
msgstr ""
"URL クオート関数は、プログラムデータを取り URL 構成要素として使用できるよう特殊文字をクオートしたり非 ASCII "
"文字を適切にエンコードすることに焦点を当てています。これらは上述の URL 解析関数でカバーされていない URL "
"構成要素からオリジナルデータの再作成もサポートしています。"

#: ../../library/urllib.parse.rst:459
msgid ""
"Replace special characters in *string* using the ``%xx`` escape. Letters, "
"digits, and the characters ``'_.-'`` are never quoted. By default, this "
"function is intended for quoting the path section of URL. The optional "
"*safe* parameter specifies additional ASCII characters that should not be "
"quoted --- its default value is ``'/'``."
msgstr ""
"*string* 内の特殊文字を ``%xx`` を使用してエスケープします。文字、数字、および ``'_.-'`` "
"はクオートされません。デフォルトでは、この関数は URL のパス部分のクオートのために用意されています。任意のパラメータ *safe* "
"を指定すると、指定した ASCII 文字もクオートされません。デフォルトは ``'/'`` です。"

#: ../../library/urllib.parse.rst:465 ../../library/urllib.parse.rst:531
msgid "*string* may be either a :class:`str` or a :class:`bytes`."
msgstr "*string* に使用できるのは :class:`str` か :class:`bytes` です。"

#: ../../library/urllib.parse.rst:467
msgid ""
"The optional *encoding* and *errors* parameters specify how to deal with "
"non-ASCII characters, as accepted by the :meth:`str.encode` method. "
"*encoding* defaults to ``'utf-8'``. *errors* defaults to ``'strict'``, "
"meaning unsupported characters raise a :class:`UnicodeEncodeError`. "
"*encoding* and *errors* must not be supplied if *string* is a "
":class:`bytes`, or a :class:`TypeError` is raised."
msgstr ""
"任意のパラメータ *encoding* と *errors* は :meth:`str.encode` で受け付けられる非 ASCII "
"文字への対処法を指定します。*encoding* のデフォルトは ``'utf-8'``、*errors* のデフォルトは ``'strict'`` "
"で、非サポート文字があると :class:`UnicodeEncodeError` を送出します。*string* が :class:`bytes` "
"の場合 *encoding* と *errors* を指定してはいけません。指定すると :class:`TypeError` が送出されます。"

#: ../../library/urllib.parse.rst:475
msgid ""
"Note that ``quote(string, safe, encoding, errors)`` is equivalent to "
"``quote_from_bytes(string.encode(encoding, errors), safe)``."
msgstr ""
"``quote(string, safe, encoding, errors)`` は "
"``quote_from_bytes(string.encode(encoding, errors), safe)`` "
"と等価であることに留意してください。"

#: ../../library/urllib.parse.rst:478
msgid "Example: ``quote('/El Niño/')`` yields ``'/El%20Ni%C3%B1o/'``."
msgstr "例: ``quote('/El Niño/')`` は ``'/El%20Ni%C3%B1o/'`` を返します。"

#: ../../library/urllib.parse.rst:483
msgid ""
"Like :func:`quote`, but also replace spaces by plus signs, as required for "
"quoting HTML form values when building up a query string to go into a URL. "
"Plus signs in the original string are escaped unless they are included in "
"*safe*.  It also does not have *safe* default to ``'/'``."
msgstr ""
":func:`quote` と似ていますが、クエリ文字列を URL に挿入する時のために HTML "
"フォームの値の空白をプラス記号「+」に置き換えます。オリジナルの文字列に「+」が存在した場合は *safe* "
"に指定されている場合を除きエスケープされます。*safe* にデフォルト値は設定されていません。"

#: ../../library/urllib.parse.rst:488
msgid "Example: ``quote_plus('/El Niño/')`` yields ``'%2FEl+Ni%C3%B1o%2F'``."
msgstr "例: ``quote_plus('/El Niño/')`` は ``'%2FEl+Ni%C3%B1o%2F'`` を返します。"

#: ../../library/urllib.parse.rst:493
msgid ""
"Like :func:`quote`, but accepts a :class:`bytes` object rather than a "
":class:`str`, and does not perform string-to-bytes encoding."
msgstr ""
":func:`quote` と似ていますが、:class:`str` ではなく :class:`bytes` "
"オブジェクトを取り、文字列からバイト列へのエンコードを行いません。"

#: ../../library/urllib.parse.rst:496
msgid "Example: ``quote_from_bytes(b'a&\\xef')`` yields ``'a%26%EF'``."
msgstr "例: ``quote_from_bytes(b'a&\\xef')`` は ``'a%26%EF'`` を返します。"

#: ../../library/urllib.parse.rst:502
msgid ""
"Replace ``%xx`` escapes by their single-character equivalent. The optional "
"*encoding* and *errors* parameters specify how to decode percent-encoded "
"sequences into Unicode characters, as accepted by the :meth:`bytes.decode` "
"method."
msgstr ""
"エスケープされた ``%xx`` をそれに対応した単一文字に置き換えます。オプション引数の *encoding* と *errors* は "
":meth:`bytes.decode` メソッドで受け付けられるパーセントエンコードされたシーケンスから Unicode "
"文字へのデコード法を指定します。"

#: ../../library/urllib.parse.rst:507 ../../library/urllib.parse.rst:521
msgid "*string* must be a :class:`str`."
msgstr "*string* は :class:`str` でなければなりません。"

#: ../../library/urllib.parse.rst:509
msgid ""
"*encoding* defaults to ``'utf-8'``. *errors* defaults to ``'replace'``, "
"meaning invalid sequences are replaced by a placeholder character."
msgstr ""
"*encoding* のデフォルトは ``'utf-8'``、*errors* のデフォルトは ``'replace'`` "
"で、不正なシーケンスはプレースホルダー文字に置き換えられます。"

#: ../../library/urllib.parse.rst:513
msgid "Example: ``unquote('/El%20Ni%C3%B1o/')`` yields ``'/El Niño/'``."
msgstr "例: ``unquote('/El%20Ni%C3%B1o/')`` は ``'/El Niño/'`` を返します。"

#: ../../library/urllib.parse.rst:518
msgid ""
"Like :func:`unquote`, but also replace plus signs by spaces, as required for"
" unquoting HTML form values."
msgstr ":func:`unquote` と似ていますが、HTML フォームの値のアンクオートのために「+」を空白に置き換えます。"

#: ../../library/urllib.parse.rst:523
msgid "Example: ``unquote_plus('/El+Ni%C3%B1o/')`` yields ``'/El Niño/'``."
msgstr "例: ``unquote_plus('/El+Ni%C3%B1o/')`` は ``'/El Niño/'`` を返します。"

#: ../../library/urllib.parse.rst:528
msgid ""
"Replace ``%xx`` escapes by their single-octet equivalent, and return a "
":class:`bytes` object."
msgstr "スケープされた ``%xx`` をそれに対応した 1 オクテットに置き換え、:class:`bytes` オブジェクトを返します。"

#: ../../library/urllib.parse.rst:533
msgid ""
"If it is a :class:`str`, unescaped non-ASCII characters in *string* are "
"encoded into UTF-8 bytes."
msgstr ""
":class:`str` だった場合、*string* 内のエスケープされていない非 ASCII 文字は UTF-8 バイト列にエンコードされます。"

#: ../../library/urllib.parse.rst:536
msgid "Example: ``unquote_to_bytes('a%26%EF')`` yields ``b'a&\\xef'``."
msgstr "例: ``unquote_to_bytes('a%26%EF')`` は ``b'a&\\xef'`` を返します。"

#: ../../library/urllib.parse.rst:542
msgid ""
"Convert a mapping object or a sequence of two-element tuples, which may "
"contain :class:`str` or :class:`bytes` objects, to a percent-encoded ASCII "
"text string.  If the resultant string is to be used as a *data* for POST "
"operation with the :func:`~urllib.request.urlopen` function, then it should "
"be encoded to bytes, otherwise it would result in a :exc:`TypeError`."
msgstr ""
"マッピング型オブジェクトまたは 2 個の要素からなるタプルのシーケンス (:class:`str` か :class:`bytes` "
"オブジェクトが含まれているかもしれません) を、パーセントエンコードされた ASCII 文字列に変換します。戻り値の文字列が "
":func:`~urllib.request.urlopen` 関数での POST 操作の *data* "
"で使用される場合はバイト列にエンコードしなければなりません。そうでない場合は :exc:`TypeError` が送出されます。"

#: ../../library/urllib.parse.rst:549
msgid ""
"The resulting string is a series of ``key=value`` pairs separated by ``'&'``"
" characters, where both *key* and *value* are quoted using the *quote_via* "
"function.  By default, :func:`quote_plus` is used to quote the values, which"
" means spaces are quoted as a ``'+'`` character and '/' characters are "
"encoded as ``%2F``, which follows the standard for GET requests "
"(``application/x-www-form-urlencoded``).  An alternate function that can be "
"passed as *quote_via* is :func:`quote`, which will encode spaces as ``%20`` "
"and not encode '/' characters.  For maximum control of what is quoted, use "
"``quote`` and specify a value for *safe*."
msgstr ""
"戻り値は ``'&'`` 文字で区切られた ``key=value`` のペアからなる一組の文字列になります。 *key* と *value* は "
"*quote_via* を使用してクオートされます。デフォルトで、値をクォートするために :func:`quote_plus` "
"が使用されます。つまり、スペースは ``'+'`` 文字に、 '/' 文字は ``%2F`` にクォートされます。これは GET "
"リクエストの標準に準拠します (``application/x-www-form-urlencoded``)。 *quote_via* "
"として渡すことができる別の関数は :func:`quote` です。それはスペースを ``%20`` にエンコードし、 '/' "
"をエンコードしません。何がクォートされるかを最大限コントロールしたければ、 ``quote`` を使って *safe* に値を指定してください。"

#: ../../library/urllib.parse.rst:559
msgid ""
"When a sequence of two-element tuples is used as the *query* argument, the "
"first element of each tuple is a key and the second is a value. The value "
"element in itself can be a sequence and in that case, if the optional "
"parameter *doseq* is evaluates to ``True``, individual ``key=value`` pairs "
"separated by ``'&'`` are generated for each element of the value sequence "
"for the key.  The order of parameters in the encoded string will match the "
"order of parameter tuples in the sequence."
msgstr ""
"引数 *query* が 2 要素のタプルのシーケンスの場合、各タプルの第一要素はキーに、第二要素は値になります。\n"
"値となる要素はシーケンスを取ることもでき、この場合、オプションのパラメーター *doseq* が ``True`` と評価されるのであれば、キーに対し値シーケンスの各要素を個別に結び付けた ``key=value`` のペアを、 ``'&'`` 文字でつないだものを生成します。\n"
"エンコードされた文字列内のパラメーターの順序はシーケンス内のパラメータータプルの順序と一致します。"

#: ../../library/urllib.parse.rst:567
msgid ""
"The *safe*, *encoding*, and *errors* parameters are passed down to "
"*quote_via* (the *encoding* and *errors* parameters are only passed when a "
"query element is a :class:`str`)."
msgstr ""
"*safe*, *encoding*, および *errors* パラメータは *quote_via* にそのまま渡されます (クエリ要素が "
":class:`str` の場合は、 *encoding* と *errors* パラメータだけが渡されます)。"

#: ../../library/urllib.parse.rst:571
msgid ""
"To reverse this encoding process, :func:`parse_qs` and :func:`parse_qsl` are"
" provided in this module to parse query strings into Python data structures."
msgstr ""
"このエンコード処理の逆を行うには、このモジュールで提供されている :func:`parse_qs` と :func:`parse_qsl` "
"を使用して、クエリ文字列を Python データ構造に変換できます。"

#: ../../library/urllib.parse.rst:574
msgid ""
"Refer to :ref:`urllib examples <urllib-examples>` to find out how urlencode "
"method can be used for generating query string for a URL or data for POST."
msgstr ""
"POST データ、あるいは URL クエリ文字列を生成するために、urlencode "
"メソッドをどのように使えばよいかを見るには、:ref:`urllib の使用例 <urllib-examples>` を参照してください。"

#: ../../library/urllib.parse.rst:577
msgid "Query parameter supports bytes and string objects."
msgstr "クエリ文字列にバイト列と文字列オブジェクトをサポートしました。"

#: ../../library/urllib.parse.rst:580
msgid "*quote_via* parameter."
msgstr "*quote_via* 引数。"

#: ../../library/urllib.parse.rst:590
msgid ":rfc:`3986` - Uniform Resource Identifiers"
msgstr ":rfc:`3986` - Uniform Resource Identifiers"

#: ../../library/urllib.parse.rst:587
msgid ""
"This is the current standard (STD66). Any changes to urllib.parse module "
"should conform to this. Certain deviations could be observed, which are "
"mostly for backward compatibility purposes and for certain de-facto parsing "
"requirements as commonly observed in major browsers."
msgstr ""
"これが現在の標準規格 (STD66) です。urllib.parse "
"モジュールに対するすべての変更はこの規格に準拠していなければなりませんが、若干の逸脱はありえます。これは主には後方互換性のため、また主要なブラウザで一般的に見られる、URL"
" を解析する上でのいくつかの事実上の要件を満たすためです。"

#: ../../library/urllib.parse.rst:593
msgid ":rfc:`2732` - Format for Literal IPv6 Addresses in URL's."
msgstr ":rfc:`2732` - Format for Literal IPv6 Addresses in URL's."

#: ../../library/urllib.parse.rst:593
msgid "This specifies the parsing requirements of IPv6 URLs."
msgstr "この規格は IPv6 の URL を解析するときの要求事項を記述しています。"

#: ../../library/urllib.parse.rst:597
msgid ":rfc:`2396` - Uniform Resource Identifiers (URI): Generic Syntax"
msgstr ":rfc:`2396` - Uniform Resource Identifiers (URI): Generic Syntax"

#: ../../library/urllib.parse.rst:596
msgid ""
"Document describing the generic syntactic requirements for both Uniform "
"Resource Names (URNs) and Uniform Resource Locators (URLs)."
msgstr ""
"この RFC では Uniform Resource Name (URN) と Uniform Resource Locator (URL) "
"の両方に対する一般的な文法的要求事項を記述しています。"

#: ../../library/urllib.parse.rst:600
msgid ":rfc:`2368` - The mailto URL scheme."
msgstr ":rfc:`2368` - The mailto URL scheme."

#: ../../library/urllib.parse.rst:600
msgid "Parsing requirements for mailto URL schemes."
msgstr "mailto URL スキームに対する文法的要求事項です。"

#: ../../library/urllib.parse.rst:605
msgid ":rfc:`1808` - Relative Uniform Resource Locators"
msgstr ":rfc:`1808` - Relative Uniform Resource Locators"

#: ../../library/urllib.parse.rst:603
msgid ""
"This Request For Comments includes the rules for joining an absolute and a "
"relative URL, including a fair number of \"Abnormal Examples\" which govern "
"the treatment of border cases."
msgstr "この RFC には絶対 URL と相対 URL を結合するための規則がボーダケースの取扱い方を決定する \"異常な例\" つきで収められています。"

#: ../../library/urllib.parse.rst:607
msgid ":rfc:`1738` - Uniform Resource Locators (URL)"
msgstr ":rfc:`1738` - Uniform Resource Locators (URL)"

#: ../../library/urllib.parse.rst:608
msgid "This specifies the formal syntax and semantics of absolute URLs."
msgstr "この RFC では絶対 URL の形式的な文法と意味付けを仕様化しています。"
