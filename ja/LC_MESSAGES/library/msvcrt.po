# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-05 15:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: cocoatomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/msvcrt.rst:2
msgid ":mod:`msvcrt` --- Useful routines from the MS VC++ runtime"
msgstr ":mod:`msvcrt` --- MS VC++実行時システムの有用なルーチン群"

#: ../../library/msvcrt.rst:12
msgid ""
"These functions provide access to some useful capabilities on Windows "
"platforms. Some higher-level modules use these functions to build the  "
"Windows implementations of their services.  For example, the :mod:`getpass` "
"module uses this in the implementation of the :func:`getpass` function."
msgstr ""
"このモジュールの関数は、 Windows "
"プラットフォームの便利な機能のいくつかに対するアクセス機構を提供しています。高レベルモジュールのいくつかは、提供するサービスを Windows "
"で実装するために、これらの関数を使っています。例えば、 :mod:`getpass` モジュールは関数 :func:`getpass` "
"を実装するためにこのモジュールの関数を使います。"

#: ../../library/msvcrt.rst:17
msgid ""
"Further documentation on these functions can be found in the Platform API "
"documentation."
msgstr "ここに挙げた関数の詳細なドキュメントについては、プラットフォーム API ドキュメントで見つけることができます。"

#: ../../library/msvcrt.rst:20
msgid ""
"The module implements both the normal and wide char variants of the console "
"I/O api. The normal API deals only with ASCII characters and is of limited "
"use for internationalized applications. The wide char API should be used "
"where ever possible."
msgstr ""
"このモジュールは、通常版とワイド文字列版の両方のコンソールI/O APIを実装しています。通常版の API は ASCII "
"文字列のためのもので、国際化アプリケーションでは利用が制限されます。可能な限りワイド文字列版APIを利用するべきです。"

#: ../../library/msvcrt.rst:25
msgid ""
"Operations in this module now raise :exc:`OSError` where :exc:`IOError` was "
"raised."
msgstr ""
"このモジュールの操作で以前は :exc:`IOError` が送出されていたところで :exc:`OSError` が送出されるようになりました。"

#: ../../library/msvcrt.rst:33
msgid "File Operations"
msgstr "ファイル操作関連"

#: ../../library/msvcrt.rst:38
msgid ""
"Lock part of a file based on file descriptor *fd* from the C runtime.  "
"Raises :exc:`OSError` on failure.  The locked region of the file extends "
"from the current file position for *nbytes* bytes, and may continue beyond "
"the end of the file.  *mode* must be one of the :const:`LK_\\*` constants "
"listed below. Multiple regions in a file may be locked at the same time, but"
" may not overlap.  Adjacent regions are not merged; they must be unlocked "
"individually."
msgstr ""
"C 言語による実行時システムにおけるファイル記述子 *fd* に基づいて、ファイルの一部にロックをかけます。失敗すると :exc:`OSError` "
"が送出されます。ロックされるファイルの領域は、現在のファイル位置から *nbytes* バイトで、ファイルの末端まで延長することができます。 "
"*mode* は以下に列挙する  :const:`LK_\\*` "
"のいずれか一つでなければなりません。一つのファイルの複数の領域を同時にロックすることは可能ですが、領域が重複してはなりません。連接する領域をまとめて指定することはできません;"
" それらの領域は個別にロック解除しなければなりません。"

#: ../../library/msvcrt.rst:49
msgid ""
"Locks the specified bytes. If the bytes cannot be locked, the program "
"immediately tries again after 1 second.  If, after 10 attempts, the bytes "
"cannot be locked, :exc:`OSError` is raised."
msgstr ""
"指定されたバイト列にロックをかけます。指定領域がロックできなかった場合、プログラムは 1 秒後に再度ロックを試みます。10 "
"回再試行した後でもロックをかけられない場合、 :exc:`OSError` が送出されます。"

#: ../../library/msvcrt.rst:57
msgid ""
"Locks the specified bytes. If the bytes cannot be locked, :exc:`OSError` is "
"raised."
msgstr "指定されたバイト列にロックをかけます。指定領域がロックできなかった場合、 :exc:`OSError` が送出されます。"

#: ../../library/msvcrt.rst:63
msgid "Unlocks the specified bytes, which must have been previously locked."
msgstr "指定されたバイト列のロックを解除します。指定領域はあらかじめロックされていなければなりません。"

#: ../../library/msvcrt.rst:68
msgid ""
"Set the line-end translation mode for the file descriptor *fd*. To set it to"
" text mode, *flags* should be :const:`os.O_TEXT`; for binary, it should be "
":const:`os.O_BINARY`."
msgstr ""
"ファイル記述子 *fd* に対して、行末文字の変換モードを設定します。テキストモードに設定するには、 *flags* を "
":const:`os.O_TEXT` にします; バイナリモードにするには :const:`os.O_BINARY` にします。"

#: ../../library/msvcrt.rst:75
msgid ""
"Create a C runtime file descriptor from the file handle *handle*.  The "
"*flags* parameter should be a bitwise OR of :const:`os.O_APPEND`, "
":const:`os.O_RDONLY`, and :const:`os.O_TEXT`.  The returned file descriptor "
"may be used as a parameter to :func:`os.fdopen` to create a file object."
msgstr ""
"C 言語による実行時システムにおけるファイル記述子をファイルハンドル *handle* から生成します。 *flags* パラメタは "
":const:`os.O_APPEND` 、 :const:`os.O_RDONLY` 、および :const:`os.O_TEXT` をビット単位で "
"OR したものになります。返されるファイル記述子は :func:`os.fdopen` でファイルオブジェクトを生成するために使うことができます。"

#: ../../library/msvcrt.rst:83
msgid ""
"Return the file handle for the file descriptor *fd*.  Raises :exc:`OSError` "
"if *fd* is not recognized."
msgstr "ファイル記述子 *fd* のファイルハンドルを返します。 *fd* が認識できない場合、 :exc:`OSError` を送出します。"

#: ../../library/msvcrt.rst:90
msgid "Console I/O"
msgstr "コンソール I/O 関連"

#: ../../library/msvcrt.rst:95
msgid "Return true if a keypress is waiting to be read."
msgstr "読み出し待ちの打鍵イベントが存在する場合に真を返します。"

#: ../../library/msvcrt.rst:100
msgid ""
"Read a keypress and return the resulting character as a byte string. Nothing"
" is echoed to the console.  This call will block if a keypress is not "
"already available, but will not wait for :kbd:`Enter` to be pressed. If the "
"pressed key was a special function key, this will return ``'\\000'`` or "
"``'\\xe0'``; the next call will return the keycode. The :kbd:`Control-C` "
"keypress cannot be read with this function."
msgstr ""
"打鍵を読み取り、読み出された文字を返します。コンソールには何もエコーバックされません。この関数呼び出しは読み出し可能な打鍵がない場合にはブロックしますが、文字を読み出せるようにするために"
" :kbd:`Enter` の打鍵を待つ必要はありません。打鍵されたキーが特殊機能キー (function key) である場合、この関数は "
"``'\\000'`` または ``'\\xe0'`` を返します; キーコードは次に関数を呼び出した際に返されます。この関数で "
":kbd:`Control-C` の打鍵を読み出すことはできません。"

#: ../../library/msvcrt.rst:110
msgid "Wide char variant of :func:`getch`, returning a Unicode value."
msgstr ":func:`getch` のワイド文字列版。Unicode の値を返します。"

#: ../../library/msvcrt.rst:115
msgid ""
"Similar to :func:`getch`, but the keypress will be echoed if it  represents "
"a printable character."
msgstr ":func:`getch` に似ていますが、打鍵した字が印字可能な文字の場合エコーバックされます。"

#: ../../library/msvcrt.rst:121
msgid "Wide char variant of :func:`getche`, returning a Unicode value."
msgstr ":func:`getche` のワイド文字列版。Unicode の値を返します。"

#: ../../library/msvcrt.rst:126
msgid "Print the byte string *char* to the console without buffering."
msgstr "バイト文字列 *char* をバッファリングを行わないでコンソールに出力します。"

#: ../../library/msvcrt.rst:131
msgid "Wide char variant of :func:`putch`, accepting a Unicode value."
msgstr ":func:`putch` のワイド文字列版。Unicode の値を引数に取ります。"

#: ../../library/msvcrt.rst:136
msgid ""
"Cause the byte string *char* to be \"pushed back\" into the console buffer; "
"it will be the next character read by :func:`getch` or :func:`getche`."
msgstr ""
"バイト文字列 *char* をコンソールバッファに \"押し戻し (push back)\" ます; これにより、押し戻された文字は "
":func:`getch` や :func:`getche` で次に読み出される文字になります。"

#: ../../library/msvcrt.rst:142
msgid "Wide char variant of :func:`ungetch`, accepting a Unicode value."
msgstr ":func:`ungetch` のワイド文字列版。Unicode の値を引数に取ります。"

#: ../../library/msvcrt.rst:148
msgid "Other Functions"
msgstr "その多の関数"

#: ../../library/msvcrt.rst:153
msgid ""
"Force the :c:func:`malloc` heap to clean itself up and return unused blocks "
"to the operating system.  On failure, this raises :exc:`OSError`."
msgstr ""
"強制的に :c:func:`malloc` ヒープをクリーンさせ、未使用のブロックをオペレーティングシステムに返させます。失敗した場合、 "
":exc:`OSError` を送出します。"
