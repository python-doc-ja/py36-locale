# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-05 15:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: cocoatomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/datastructures.rst:5
msgid "Data Structures"
msgstr "データ構造"

#: ../../tutorial/datastructures.rst:7
msgid ""
"This chapter describes some things you've learned about already in more "
"detail, and adds some new things as well."
msgstr "この章では、すでに学んだことについてより詳しく説明するとともに、いくつか新しいことを追加します。"

#: ../../tutorial/datastructures.rst:13
msgid "More on Lists"
msgstr "リスト型についてもう少し"

#: ../../tutorial/datastructures.rst:15
msgid ""
"The list data type has some more methods.  Here are all of the methods of "
"list objects:"
msgstr "リストデータ型には、他にもいくつかメソッドがあります。リストオブジェクトのすべてのメソッドを以下に示します:"

#: ../../tutorial/datastructures.rst:22
msgid ""
"Add an item to the end of the list.  Equivalent to ``a[len(a):] = [x]``."
msgstr "リストの末尾に要素を一つ追加します。``a[len(a):] = [x]`` と等価です。"

#: ../../tutorial/datastructures.rst:28
msgid ""
"Extend the list by appending all the items from the iterable.  Equivalent to"
" ``a[len(a):] = iterable``."
msgstr "イテラブルのすべての要素を対象のリストに追加し、リストを拡張します。``a[len(a):] = iterable`` と等価です。"

#: ../../tutorial/datastructures.rst:35
msgid ""
"Insert an item at a given position.  The first argument is the index of the "
"element before which to insert, so ``a.insert(0, x)`` inserts at the front "
"of the list, and ``a.insert(len(a), x)`` is equivalent to ``a.append(x)``."
msgstr ""
"指定した位置に要素を挿入します。第 1 引数は、リストのインデクスで、そのインデクスを持つ要素の直前に挿入が行われます。従って、 "
"``a.insert(0, x)`` はリストの先頭に挿入を行います。また ``a.insert(len(a), x)`` は "
"``a.append(x)`` と等価です。"

#: ../../tutorial/datastructures.rst:43
msgid ""
"Remove the first item from the list whose value is *x*.  It is an error if "
"there is no such item."
msgstr "リスト中で、値 *x* を持つ最初の要素を削除します。該当する項目がなければエラーとなります。"

#: ../../tutorial/datastructures.rst:50
msgid ""
"Remove the item at the given position in the list, and return it.  If no "
"index is specified, ``a.pop()`` removes and returns the last item in the "
"list.  (The square brackets around the *i* in the method signature denote "
"that the parameter is optional, not that you should type square brackets at "
"that position.  You will see this notation frequently in the Python Library "
"Reference.)"
msgstr ""
"リスト中の指定された位置にある要素をリストから削除して、その要素を返します。インデクスが指定されなければ、 ``a.pop()`` "
"はリストの末尾の要素を削除して返します。この場合も要素は削除されます。 (メソッドの用法 (signature) で *i* "
"の両側にある角括弧は、この引数がオプションであることを表しているだけなので、角括弧を入力する必要はありません。この表記法は Python Library"
" Reference の中で頻繁に見ることになるでしょう。)"

#: ../../tutorial/datastructures.rst:60
msgid "Remove all items from the list.  Equivalent to ``del a[:]``."
msgstr "リスト中の全ての要素を削除します。``del a[:]`` と等価です。"

#: ../../tutorial/datastructures.rst:66
msgid ""
"Return zero-based index in the list of the first item whose value is *x*. "
"Raises a :exc:`ValueError` if there is no such item."
msgstr ""
"リスト中で、値 *x* を持つ最初の要素の位置をゼロから始まる添字で返します。 該当する要素がなければ、:exc:`ValueError` "
"を送出します。"

#: ../../tutorial/datastructures.rst:69
msgid ""
"The optional arguments *start* and *end* are interpreted as in the slice "
"notation and are used to limit the search to a particular subsequence of the"
" list.  The returned index is computed relative to the beginning of the full"
" sequence rather than the *start* argument."
msgstr ""
"任意の引数である *start* と *end* はスライス記法として解釈され、リストの探索範囲を指定できます。返される添字は、*start* "
"引数からの相対位置ではなく、リスト全体の先頭からの位置になります。"

#: ../../tutorial/datastructures.rst:78
msgid "Return the number of times *x* appears in the list."
msgstr "リストでの *x* の出現回数を返します。"

#: ../../tutorial/datastructures.rst:84
msgid ""
"Sort the items of the list in place (the arguments can be used for sort "
"customization, see :func:`sorted` for their explanation)."
msgstr ""
"リストの項目を、インプレース演算 (in place、元のデータを演算結果で置き換えるやりかた) "
"でソートします。引数はソート方法のカスタマイズに使えます。 :func:`sorted` の説明を参照してください。"

#: ../../tutorial/datastructures.rst:91
msgid "Reverse the elements of the list in place."
msgstr "リストの要素を、インプレース演算で逆順にします。"

#: ../../tutorial/datastructures.rst:97
msgid "Return a shallow copy of the list.  Equivalent to ``a[:]``."
msgstr "リストの浅い (shallow) コピーを返します。``a[:]`` と等価です。"

#: ../../tutorial/datastructures.rst:100
msgid "An example that uses most of the list methods::"
msgstr "以下にリストのメソッドをほぼ全て使った例を示します::"

#: ../../tutorial/datastructures.rst:123
msgid ""
"You might have noticed that methods like ``insert``, ``remove`` or ``sort`` "
"that only modify the list have no return value printed -- they return the "
"default ``None``. [1]_  This is a design principle for all mutable data "
"structures in Python."
msgstr ""
"``insert``, ``remove``, ``sort`` "
"などのリストを操作するメソッドの戻り値が表示されていないことに気が付いたかもしれません。これらのメソッドは ``None`` を返しています。[1]_ "
"これは Python の変更可能なデータ構造全てについての設計上の原則となっています。"

#: ../../tutorial/datastructures.rst:132
msgid "Using Lists as Stacks"
msgstr "リストをスタックとして使う"

#: ../../tutorial/datastructures.rst:137
msgid ""
"The list methods make it very easy to use a list as a stack, where the last "
"element added is the first element retrieved (\"last-in, first-out\").  To "
"add an item to the top of the stack, use :meth:`append`.  To retrieve an "
"item from the top of the stack, use :meth:`pop` without an explicit index.  "
"For example::"
msgstr ""
"リスト型のメソッドのおかげで、簡単にリストをスタックとして使えます。スタックでは、最後に追加された要素が最初に取り出されます (\"last-in, "
"first-out\")。スタックの一番上に要素を追加するには :meth:`append` を使います。スタックの一番上から要素を取り出すには "
":meth:`pop` をインデクスを指定せずに使います。例えば以下のようにします::"

#: ../../tutorial/datastructures.rst:162
msgid "Using Lists as Queues"
msgstr "リストをキューとして使う"

#: ../../tutorial/datastructures.rst:166
msgid ""
"It is also possible to use a list as a queue, where the first element added "
"is the first element retrieved (\"first-in, first-out\"); however, lists are"
" not efficient for this purpose.  While appends and pops from the end of "
"list are fast, doing inserts or pops from the beginning of a list is slow "
"(because all of the other elements have to be shifted by one)."
msgstr ""
"リストをキュー (queue) として使うことも可能です。この場合、最初に追加した要素を最初に取り出します (\"first-in, first-"
"out\")。しかし、リストでは効率的にこの目的を達成することが出来ません。追加（append）や取り出し（pop）をリストの末尾に対して行うと速いのですが、挿入（insert）や取り出し（pop）をリストの先頭に対して行うと遅くなってしまいます（他の要素をひとつずつずらす必要があるからです）。"

#: ../../tutorial/datastructures.rst:172
msgid ""
"To implement a queue, use :class:`collections.deque` which was designed to "
"have fast appends and pops from both ends.  For example::"
msgstr ""
"キューの実装には、 :class:`collections.deque` "
"を使うと良いでしょう。このクラスは良く設計されていて、高速な追加（append）と取り出し（pop）を両端に対して実現しています。例えば以下のようにします::"

#: ../../tutorial/datastructures.rst:190
msgid "List Comprehensions"
msgstr "リストの内包表記"

#: ../../tutorial/datastructures.rst:192
msgid ""
"List comprehensions provide a concise way to create lists. Common "
"applications are to make new lists where each element is the result of some "
"operations applied to each member of another sequence or iterable, or to "
"create a subsequence of those elements that satisfy a certain condition."
msgstr ""
"リスト内包表記はリストを生成する簡潔な手段を提供しています。主な利用場面は、あるシーケンスや iterable (イテレート可能オブジェクト) "
"のそれぞれの要素に対してある操作を行った結果を要素にしたリストを作ったり、ある条件を満たす要素だけからなる部分シーケンスを作成することです。"

#: ../../tutorial/datastructures.rst:197
msgid "For example, assume we want to create a list of squares, like::"
msgstr "例えば、次のような平方のリストを作りたいとします::"

#: ../../tutorial/datastructures.rst:206
msgid ""
"Note that this creates (or overwrites) a variable named ``x`` that still "
"exists after the loop completes.  We can calculate the list of squares "
"without any side effects using::"
msgstr ""
"これはループが終了した後にも存在する ``x`` という名前の変数を作る (または上書きする) "
"ことに注意してください。以下のようにして平方のリストをいかなる副作用もなく計算することができます::"

#: ../../tutorial/datastructures.rst:212
msgid "or, equivalently::"
msgstr "もしくは、以下でも同じです::"

#: ../../tutorial/datastructures.rst:216
msgid "which is more concise and readable."
msgstr "これはより簡潔で読みやすいです。"

#: ../../tutorial/datastructures.rst:218
msgid ""
"A list comprehension consists of brackets containing an expression followed "
"by a :keyword:`for` clause, then zero or more :keyword:`for` or "
":keyword:`if` clauses.  The result will be a new list resulting from "
"evaluating the expression in the context of the :keyword:`for` and "
":keyword:`if` clauses which follow it. For example, this listcomp combines "
"the elements of two lists if they are not equal::"
msgstr ""
"リスト内包表記は、括弧の中の 式、 :keyword:`for` 句、そして0個以上の :keyword:`for` か :keyword:`if` "
"句で構成されます。リスト内包表記の実行結果は、 :keyword:`for` と :keyword:`if` "
"句のコンテキスト中で式を評価した結果からなる新しいリストです。例えば、次のリスト内包表記は2つのリストの要素から、違うもの同士をペアにします::"

#: ../../tutorial/datastructures.rst:228
msgid "and it's equivalent to::"
msgstr "これは次のコードと等価です::"

#: ../../tutorial/datastructures.rst:239
msgid ""
"Note how the order of the :keyword:`for` and :keyword:`if` statements is the"
" same in both these snippets."
msgstr ":keyword:`for` と :keyword:`if` 文が両方のコードで同じ順序になっていることに注目してください。"

#: ../../tutorial/datastructures.rst:242
msgid ""
"If the expression is a tuple (e.g. the ``(x, y)`` in the previous example), "
"it must be parenthesized. ::"
msgstr "式がタプルの場合 (例: 上の例で式が ``(x, y)`` の場合) は、タプルに円括弧が必要です。 ::"

#: ../../tutorial/datastructures.rst:273
msgid ""
"List comprehensions can contain complex expressions and nested functions::"
msgstr "リスト内包表記の式には、複雑な式や関数呼び出しのネストができます::"

#: ../../tutorial/datastructures.rst:280
msgid "Nested List Comprehensions"
msgstr "ネストしたリストの内包表記"

#: ../../tutorial/datastructures.rst:282
msgid ""
"The initial expression in a list comprehension can be any arbitrary "
"expression, including another list comprehension."
msgstr "リスト内包表記中の最初の式は任意の式なので、そこに他のリスト内包表記を書くこともできます。"

#: ../../tutorial/datastructures.rst:285
msgid ""
"Consider the following example of a 3x4 matrix implemented as a list of 3 "
"lists of length 4::"
msgstr "次の、長さ4のリスト3つからなる、3x4 の matrix について考えます::"

#: ../../tutorial/datastructures.rst:294
msgid "The following list comprehension will transpose rows and columns::"
msgstr "次のリスト内包表記は、matrix の行と列を入れ替えます::"

#: ../../tutorial/datastructures.rst:299
msgid ""
"As we saw in the previous section, the nested listcomp is evaluated in the "
"context of the :keyword:`for` that follows it, so this example is equivalent"
" to::"
msgstr ""
"前の節で見たように、ネストしたリスト内包表記は、続く :keyword:`for` "
"のコンテキストの中で評価されます。なので、この例は次のコードと等価です::"

#: ../../tutorial/datastructures.rst:310
msgid "which, in turn, is the same as::"
msgstr "これをもう一度変換すると、次のコードと等価になります::"

#: ../../tutorial/datastructures.rst:323
msgid ""
"In the real world, you should prefer built-in functions to complex flow "
"statements. The :func:`zip` function would do a great job for this use "
"case::"
msgstr "実際には複雑な流れの式よりも組み込み関数を使う方が良いです。この場合 :func:`zip` 関数が良い仕事をしてくれるでしょう::"

#: ../../tutorial/datastructures.rst:329
msgid ""
"See :ref:`tut-unpacking-arguments` for details on the asterisk in this line."
msgstr "この行にあるアスタリスクの詳細については :ref:`tut-unpacking-arguments` を参照してください。"

#: ../../tutorial/datastructures.rst:334
msgid "The :keyword:`del` statement"
msgstr ":keyword:`del` 文"

#: ../../tutorial/datastructures.rst:336
msgid ""
"There is a way to remove an item from a list given its index instead of its "
"value: the :keyword:`del` statement.  This differs from the :meth:`pop` "
"method which returns a value.  The :keyword:`del` statement can also be used"
" to remove slices from a list or clear the entire list (which we did earlier"
" by assignment of an empty list to the slice).  For example::"
msgstr ""
"リストから要素を削除する際、値を指定する代わりにインデックスを指定する方法があります。それが :keyword:`del` 文です。これは "
":meth:`pop` メソッドと違い、値を返しません。 :keyword:`del` "
"文はリストからスライスを除去したり、リスト全体を削除することもできます(以前はスライスに空のリストを代入して行っていました)。例えば以下のようにします::"

#: ../../tutorial/datastructures.rst:353
msgid ":keyword:`del` can also be used to delete entire variables::"
msgstr ":keyword:`del` は変数全体の削除にも使えます::"

#: ../../tutorial/datastructures.rst:357
msgid ""
"Referencing the name ``a`` hereafter is an error (at least until another "
"value is assigned to it).  We'll find other uses for :keyword:`del` later."
msgstr ""
"この文の後で名前 ``a`` を参照すると、(別の値を ``a`` に代入するまで) エラーになります。 :keyword:`del` "
"の別の用途についてはまた後で取り上げます。"

#: ../../tutorial/datastructures.rst:364
msgid "Tuples and Sequences"
msgstr "タプルとシーケンス"

#: ../../tutorial/datastructures.rst:366
msgid ""
"We saw that lists and strings have many common properties, such as indexing "
"and slicing operations.  They are two examples of *sequence* data types (see"
" :ref:`typesseq`).  Since Python is an evolving language, other sequence "
"data types may be added.  There is also another standard sequence data type:"
" the *tuple*."
msgstr ""
"リストや文字列には、インデクスやスライスを使った演算のように、数多くの共通の性質があることを見てきました。これらは *シーケンス (sequence)*"
" データ型 (:ref:`typesseq` を参照) の二つの例です。 Python "
"はまだ進歩の過程にある言語なので、他のシーケンスデータ型が追加されるかもしれません。標準のシーケンス型はもう一つあります: *タプル (tuple)* "
"型です。"

#: ../../tutorial/datastructures.rst:372
msgid ""
"A tuple consists of a number of values separated by commas, for instance::"
msgstr "タプルはコンマで区切られたいくつかの値からなります。例えば以下のように書きます::"

#: ../../tutorial/datastructures.rst:394
msgid ""
"As you see, on output tuples are always enclosed in parentheses, so that "
"nested tuples are interpreted correctly; they may be input with or without "
"surrounding parentheses, although often parentheses are necessary anyway (if"
" the tuple is part of a larger expression).  It is not possible to assign to"
" the individual items of a tuple, however it is possible to create tuples "
"which contain mutable objects, such as lists."
msgstr ""
"ご覧のとおり、タプルの表示には常に丸括弧がついていて、タプルのネストが正しく解釈されるようになっています。タプルを書くときは必ずしも丸括弧で囲まなくてもいいですが、(タプルが大きな式の一部だった場合は)"
" 丸括弧が必要な場合もあります。タプルの要素を代入することはできません。しかし、タプルにリストのような変更可能型を含めることはできます。"

#: ../../tutorial/datastructures.rst:401
msgid ""
"Though tuples may seem similar to lists, they are often used in different "
"situations and for different purposes. Tuples are :term:`immutable`, and "
"usually contain a heterogeneous sequence of elements that are accessed via "
"unpacking (see later in this section) or indexing (or even by attribute in "
"the case of :func:`namedtuples <collections.namedtuple>`). Lists are "
":term:`mutable`, and their elements are usually homogeneous and are accessed"
" by iterating over the list."
msgstr ""
"タプルはリストと似ていますが、たいてい異なる場面と異なる目的で利用されます。タプルは不変型 (:term:`immutable`) "
"で、複数の型の要素からなることもあり、要素はアンパック(この節の後半に出てきます)操作やインデックス (あるいは :func:`namedtuples "
"<collections.namedtuple>` の場合は属性)でアクセスすることが多いです。一方、リストは変更可能 "
"(:term:`mutable`) で、要素はたいてい同じ型のオブジェクトであり、たいていイテレートによってアクセスします。"

#: ../../tutorial/datastructures.rst:409
msgid ""
"A special problem is the construction of tuples containing 0 or 1 items: the"
" syntax has some extra quirks to accommodate these.  Empty tuples are "
"constructed by an empty pair of parentheses; a tuple with one item is "
"constructed by following a value with a comma (it is not sufficient to "
"enclose a single value in parentheses). Ugly, but effective.  For example::"
msgstr ""
"問題は 0 個または 1 "
"個の項目からなるタプルの構築です。これらの操作を行うため、構文には特別な細工がされています。空のタプルは空の丸括弧ペアで構築できます。一つの要素を持つタプルは、値の後ろにコンマを続ける"
" (単一の値を丸括弧で囲むだけでは不十分です) ことで構築できます。美しくはないけれども、効果的です。例えば以下のようにします::"

#: ../../tutorial/datastructures.rst:424
msgid ""
"The statement ``t = 12345, 54321, 'hello!'`` is an example of *tuple "
"packing*: the values ``12345``, ``54321`` and ``'hello!'`` are packed "
"together in a tuple. The reverse operation is also possible::"
msgstr ""
"文 ``t = 12345, 54321, 'hello!'`` は *タプルのパック (tuple packing)* の例です。値 "
"``12345``, ``54321``, ``'hello!'`` が一つのタプルにパックされます。逆の演算も可能です::"

#: ../../tutorial/datastructures.rst:430
msgid ""
"This is called, appropriately enough, *sequence unpacking* and works for any"
" sequence on the right-hand side.  Sequence unpacking requires that there "
"are as many variables on the left side of the equals sign as there are "
"elements in the sequence.  Note that multiple assignment is really just a "
"combination of tuple packing and sequence unpacking."
msgstr ""
"この操作は、*シーケンスのアンパック (sequence unpacking)* "
"とでも呼ぶべきもので、右辺には全てのシーケンス型を使うことができます。シーケンスのアンパックでは、等号の左辺に列挙されている変数が、右辺のシーケンスの長さと同じ数だけあることが要求されます。複数同時の代入が実はタプルのパックとシーケンスのアンパックを組み合わせたものに過ぎないことに注意してください。"

#: ../../tutorial/datastructures.rst:440
msgid "Sets"
msgstr "集合型"

#: ../../tutorial/datastructures.rst:442
msgid ""
"Python also includes a data type for *sets*.  A set is an unordered "
"collection with no duplicate elements.  Basic uses include membership "
"testing and eliminating duplicate entries.  Set objects also support "
"mathematical operations like union, intersection, difference, and symmetric "
"difference."
msgstr ""
"Python には、 *集合 (set)* を扱うためのデータ型もあります。集合とは、重複する要素をもたない、順序づけられていない要素の集まりです。 "
"Set オブジェクトは、和 (union)、積 (intersection)、差 (difference)、対称差 (symmetric "
"difference)といった数学的な演算もサポートしています。"

#: ../../tutorial/datastructures.rst:447
msgid ""
"Curly braces or the :func:`set` function can be used to create sets.  Note: "
"to create an empty set you have to use ``set()``, not ``{}``; the latter "
"creates an empty dictionary, a data structure that we discuss in the next "
"section."
msgstr ""
"中括弧、または :func:`set` 関数は set を生成するために使用することができます。注: 空集合を作成するためには ``set()`` "
"を使用しなければなりません (``{}`` ではなく)。後者は空の辞書を作成します。辞書は次のセクションで議論するデータ構造です。"

#: ../../tutorial/datastructures.rst:451
msgid "Here is a brief demonstration::"
msgstr "簡単なデモンストレーションを示します::"

#: ../../tutorial/datastructures.rst:476
msgid ""
"Similarly to :ref:`list comprehensions <tut-listcomps>`, set comprehensions "
"are also supported::"
msgstr ":ref:`リスト内包 <tut-listcomps>` と同様に、 set 内包もサポートされています::"

#: ../../tutorial/datastructures.rst:487
msgid "Dictionaries"
msgstr "辞書型 (dictionary)"

#: ../../tutorial/datastructures.rst:489
msgid ""
"Another useful data type built into Python is the *dictionary* (see "
":ref:`typesmapping`). Dictionaries are sometimes found in other languages as"
" \"associative memories\" or \"associative arrays\".  Unlike sequences, "
"which are indexed by a range of numbers, dictionaries are indexed by *keys*,"
" which can be any immutable type; strings and numbers can always be keys.  "
"Tuples can be used as keys if they contain only strings, numbers, or tuples;"
" if a tuple contains any mutable object either directly or indirectly, it "
"cannot be used as a key. You can't use lists as keys, since lists can be "
"modified in place using index assignments, slice assignments, or methods "
"like :meth:`append` and :meth:`extend`."
msgstr ""
"もう一つ、有用な型が Python に組み込まれています。それは *辞書 (dictionary)* (:ref:`typesmapping` "
"を参照)です。辞書は他の言語にも \"連想記憶 (associated memory)\" や \"連想配列 (associative array)\""
" という名前で存在することがあります。ある範囲の数でインデクス化されているシーケンスと異なり、辞書は *キー (key)* "
"でインデクス化されています。このキーは何らかの変更不能な型になります。文字列、数値は常にキーにすることができます。タプルは、文字列、数値、その他のタプルのみを含む場合はキーにすることができます。直接、あるいは間接的に変更可能なオブジェクトを含むタプルはキーにできません。リストをキーとして使うことはできません。これは、リストにスライスやインデクス指定の代入を行ったり、"
" :meth:`append` や :meth:`extend` のようなメソッドを使うと、インプレースで変更することができるためです。"

#: ../../tutorial/datastructures.rst:500
msgid ""
"It is best to think of a dictionary as an unordered set of *key: value* "
"pairs, with the requirement that the keys are unique (within one "
"dictionary). A pair of braces creates an empty dictionary: ``{}``. Placing a"
" comma-separated list of key:value pairs within the braces adds initial "
"key:value pairs to the dictionary; this is also the way dictionaries are "
"written on output."
msgstr ""
"辞書は順序付けのされていない *キー(key): 値(value)* のペアの集合であり、キーが "
"(辞書の中で)一意でければならない、と考えるとよいでしょう。波括弧 (brace) のペア: ``{}`` は空の辞書を生成します。カンマで区切られた "
"key: value のペアを波括弧ペアの間に入れると、辞書の初期値となる key: value が追加されます; "
"この表現方法は出力時に辞書が書き出されるのと同じ方法です。"

#: ../../tutorial/datastructures.rst:506
msgid ""
"The main operations on a dictionary are storing a value with some key and "
"extracting the value given the key.  It is also possible to delete a "
"key:value pair with ``del``. If you store using a key that is already in "
"use, the old value associated with that key is forgotten.  It is an error to"
" extract a value using a non-existent key."
msgstr ""
"辞書での主な操作は、ある値を何らかのキーを付けて記憶することと、キーを指定して値を取り出すことです。 ``del`` で key: value "
"のペアを削除することもできます。すでに使われているキーを使って値を記憶すると、以前そのキーに関連づけられていた値は忘れ去られてしまいます。存在しないキーを使って値を取り出そうとするとエラーになります。"

#: ../../tutorial/datastructures.rst:512
msgid ""
"Performing ``list(d.keys())`` on a dictionary returns a list of all the keys"
" used in the dictionary, in arbitrary order (if you want it sorted, just use"
" ``sorted(d.keys())`` instead). [2]_  To check whether a single key is in "
"the dictionary, use the :keyword:`in` keyword."
msgstr ""
"辞書オブジェクトに ``list(d.keys())`` を実行すると、辞書で使われている全てのキーからなるリストを適当な順番で返します "
"(ソートされたリストが欲しい場合は、代わりに ``sorted(d.keys())`` を使ってください)。 [2]_  "
"ある単一のキーが辞書にあるかどうか調べるには、 :keyword:`in` キーワードを使います。"

#: ../../tutorial/datastructures.rst:517
msgid "Here is a small example using a dictionary::"
msgstr "以下に、辞書を使った簡単な例を示します::"

#: ../../tutorial/datastructures.rst:538
msgid ""
"The :func:`dict` constructor builds dictionaries directly from sequences of "
"key-value pairs::"
msgstr ":func:`dict` コンストラクタは、キーと値のペアのタプルを含むリストから辞書を生成します::"

#: ../../tutorial/datastructures.rst:544
msgid ""
"In addition, dict comprehensions can be used to create dictionaries from "
"arbitrary key and value expressions::"
msgstr "さらに、辞書内包表現を使って、任意のキーと値のペアから辞書を作れます::"

#: ../../tutorial/datastructures.rst:550
msgid ""
"When the keys are simple strings, it is sometimes easier to specify pairs "
"using keyword arguments::"
msgstr "キーが単純な文字列の場合、キーワード引数を使って定義する方が単純な場合もあります::"

#: ../../tutorial/datastructures.rst:560
msgid "Looping Techniques"
msgstr "ループのテクニック"

#: ../../tutorial/datastructures.rst:562
msgid ""
"When looping through dictionaries, the key and corresponding value can be "
"retrieved at the same time using the :meth:`items` method. ::"
msgstr "辞書に対してループを行う際、 :meth:`items` メソッドを使うと、キーとそれに対応する値を同時に取り出せます。 ::"

#: ../../tutorial/datastructures.rst:572
msgid ""
"When looping through a sequence, the position index and corresponding value "
"can be retrieved at the same time using the :func:`enumerate` function. ::"
msgstr ""
"シーケンスにわたるループを行う際、 :func:`enumerate` 関数を使うと、要素のインデックスと要素を同時に取り出すことができます。 ::"

#: ../../tutorial/datastructures.rst:582
msgid ""
"To loop over two or more sequences at the same time, the entries can be "
"paired with the :func:`zip` function. ::"
msgstr ""
"二つまたはそれ以上のシーケンス型を同時にループするために、関数 :func:`zip` を使って各要素をひと組みにすることができます。 ::"

#: ../../tutorial/datastructures.rst:594
msgid ""
"To loop over a sequence in reverse, first specify the sequence in a forward "
"direction and then call the :func:`reversed` function. ::"
msgstr ""
"シーケンスを逆方向に渡ってループするには、まずシーケンスの範囲を順方向に指定し、次いで関数 :func:`reversed` を呼び出します。 ::"

#: ../../tutorial/datastructures.rst:606
msgid ""
"To loop over a sequence in sorted order, use the :func:`sorted` function "
"which returns a new sorted list while leaving the source unaltered. ::"
msgstr ""
"シーケンスをソートされた順序でループするには、 :func:`sorted` "
"関数を使います。この関数は元の配列を変更せず、ソート済みの新たな配列を返します。 ::"

#: ../../tutorial/datastructures.rst:618
msgid ""
"It is sometimes tempting to change a list while you are looping over it; "
"however, it is often simpler and safer to create a new list instead. ::"
msgstr ""
"ときどきループ内でリストを変更したい誘惑に駆られるでしょうが、代わりに新しいリストを作ってしまうほうがより簡単で安全なことが、ままあります ::"

#: ../../tutorial/datastructures.rst:635
msgid "More on Conditions"
msgstr "条件についてもう少し"

#: ../../tutorial/datastructures.rst:637
msgid ""
"The conditions used in ``while`` and ``if`` statements can contain any "
"operators, not just comparisons."
msgstr "``while`` や ``if`` 文で使った条件 (condition) には、値の比較だけでなく、他の演算子も使うことができます。"

#: ../../tutorial/datastructures.rst:640
msgid ""
"The comparison operators ``in`` and ``not in`` check whether a value occurs "
"(does not occur) in a sequence.  The operators ``is`` and ``is not`` compare"
" whether two objects are really the same object; this only matters for "
"mutable objects like lists.  All comparison operators have the same "
"priority, which is lower than that of all numerical operators."
msgstr ""
"比較演算子 ``in`` および ``not in`` は、ある値があるシーケンス中に存在するか (または存在しないか) どうかを調べます。演算子 "
"``is`` および ``is not`` "
"は、二つのオブジェクトが実際に同じオブジェクトであるかどうかを調べます。この比較は、リストのような変更可能なオブジェクトにだけ意味があります。全ての比較演算子は同じ優先順位を持っており、ともに数値演算子よりも低い優先順位となります。(訳注:"
" ``is`` は、 ``is None`` "
"のように、シングルトンの変更不能オブジェクトとの比較に用いる場合もあります。(「変更可能なオブジェクトにだけ意味があります」の部分を削除することを "
"Doc-SIG に提案中。))"

#: ../../tutorial/datastructures.rst:646
msgid ""
"Comparisons can be chained.  For example, ``a < b == c`` tests whether ``a``"
" is less than ``b`` and moreover ``b`` equals ``c``."
msgstr ""
"比較は連結させることができます。例えば、 ``a < b == c`` は、 ``a`` が ``b`` より小さく、かつ ``b`` と ``c`` "
"が等しいかどうかをテストします。"

#: ../../tutorial/datastructures.rst:649
msgid ""
"Comparisons may be combined using the Boolean operators ``and`` and ``or``, "
"and the outcome of a comparison (or of any other Boolean expression) may be "
"negated with ``not``.  These have lower priorities than comparison "
"operators; between them, ``not`` has the highest priority and ``or`` the "
"lowest, so that ``A and not B or C`` is equivalent to ``(A and (not B)) or "
"C``. As always, parentheses can be used to express the desired composition."
msgstr ""
"ブール演算子 ``and`` や ``or`` で比較演算を組み合わせることができます。そして、比較演算 (あるいは何らかのブール式) の結果の否定は "
"``not`` でとれます。これらの演算子は全て、比較演算子よりも低い優先順位になっています。 ``A and not B or C`` と ``(A "
"and (not B)) or C`` が等価になるように、ブール演算子の中で、 ``not`` の優先順位が最も高く、 ``or`` "
"が最も低くなっています。もちろん、丸括弧を使えば望みの組み合わせを表現できます。"

#: ../../tutorial/datastructures.rst:656
msgid ""
"The Boolean operators ``and`` and ``or`` are so-called *short-circuit* "
"operators: their arguments are evaluated from left to right, and evaluation "
"stops as soon as the outcome is determined.  For example, if ``A`` and ``C``"
" are true but ``B`` is false, ``A and B and C`` does not evaluate the "
"expression ``C``.  When used as a general value and not as a Boolean, the "
"return value of a short-circuit operator is the last evaluated argument."
msgstr ""
"ブール演算子 ``and`` と ``or`` は、いわゆる *短絡 (short-circuit)* "
"演算子です。これらの演算子の引数は左から右へと順に評価され、結果が確定した時点で評価を止めます。例えば、 ``A`` と ``C`` は真で ``B``"
" が偽のとき、 ``A and B and C`` は式 ``C`` "
"を評価しません。一般に、短絡演算子の戻り値をブール値ではなくて一般的な値として用いると、値は最後に評価された引数になります。"

#: ../../tutorial/datastructures.rst:663
msgid ""
"It is possible to assign the result of a comparison or other Boolean "
"expression to a variable.  For example, ::"
msgstr "比較や他のブール式の結果を変数に代入することもできます。例えば、 ::"

#: ../../tutorial/datastructures.rst:671
msgid ""
"Note that in Python, unlike C, assignment cannot occur inside expressions. C"
" programmers may grumble about this, but it avoids a common class of "
"problems encountered in C programs: typing ``=`` in an expression when "
"``==`` was intended."
msgstr ""
"Python では、C 言語と違って、式の内部で代入を行えないので注意してください。 C 言語のプログラマは不満に思うかもしれませんが、この仕様は、 C"
" 言語プログラムで遭遇する、式の中で ``==`` のつもりで ``=`` とタイプしてしまうといったありふれた問題を回避します。"

#: ../../tutorial/datastructures.rst:680
msgid "Comparing Sequences and Other Types"
msgstr "シーケンスとその他の型の比較"

#: ../../tutorial/datastructures.rst:682
msgid ""
"Sequence objects may be compared to other objects with the same sequence "
"type. The comparison uses *lexicographical* ordering: first the first two "
"items are compared, and if they differ this determines the outcome of the "
"comparison; if they are equal, the next two items are compared, and so on, "
"until either sequence is exhausted. If two items to be compared are "
"themselves sequences of the same type, the lexicographical comparison is "
"carried out recursively.  If all items of two sequences compare equal, the "
"sequences are considered equal. If one sequence is an initial sub-sequence "
"of the other, the shorter sequence is the smaller (lesser) one.  "
"Lexicographical ordering for strings uses the Unicode code point number to "
"order individual characters.  Some examples of comparisons between sequences"
" of the same type::"
msgstr ""
"シーケンスオブジェクトは同じシーケンス型の他のオブジェクトと比較できます。比較には *辞書的な (lexicographical)* "
"順序が用いられます。まず、最初の二つの要素を比較し、その値が等しくなければその時点で比較結果が決まります。等しければ次の二つの要素を比較し、以降シーケンスの要素が尽きるまで続けます。比較しようとする二つの要素がいずれも同じシーケンス型であれば、そのシーケンス間での辞書比較を再帰的に行います。二つのシーケンスの全ての要素の比較結果が等しくなれば、シーケンスは等しいとみなされます。片方のシーケンスがもう一方の先頭部分にあたる部分シーケンスならば、短い方のシーケンスが小さいシーケンスとみなされます。文字列に対する辞書的な順序づけには、個々の文字を並べるのに"
" Unicode コードポイントの数を用います。以下に、同じ型のオブジェクトを持つシーケンス間での比較を行った例を示します::"

#: ../../tutorial/datastructures.rst:702
msgid ""
"Note that comparing objects of different types with ``<`` or ``>`` is legal "
"provided that the objects have appropriate comparison methods.  For example,"
" mixed numeric types are compared according to their numeric value, so 0 "
"equals 0.0, etc.  Otherwise, rather than providing an arbitrary ordering, "
"the interpreter will raise a :exc:`TypeError` exception."
msgstr ""
"違う型のオブジェクト同士を ``<`` や ``>`` "
"で比較することも、それらのオブジェクトが適切な比較メソッドを提供しているのであれば許可されます。例えば、異なる数値型同士の比較では、その数値によって比較が行われます。例えば、"
" 0 と 0.0 は等価です。一方、適切な比較順序がない場合は、インタープリターは :exc:`TypeError` 例外を発生させます。"

#: ../../tutorial/datastructures.rst:710
msgid "Footnotes"
msgstr "脚注"

#: ../../tutorial/datastructures.rst:711
msgid ""
"Other languages may return the mutated object, which allows method chaining,"
" such as ``d->insert(\"a\")->remove(\"b\")->sort();``."
msgstr ""
"他の言語では変更可能なオブジェクトを返して、``d->insert(\"a\")->remove(\"b\")->sort();`` "
"のようなメソッドチェインを許している場合もあります。"

#: ../../tutorial/datastructures.rst:714
msgid ""
"Calling ``d.keys()`` will return a :dfn:`dictionary view` object.  It "
"supports operations like membership test and iteration, but its contents are"
" not independent of the original dictionary -- it is only a *view*."
msgstr ""
"``d.keys()`` は辞書ビュー (:dfn:`dictionary view`) "
"オブジェクトを返します。ビューオブジェクトはメンバーかどうかのテスト (訳注: `in` の事) "
"とイテレーションをサポートしていますが、その要素は元の辞書と独立していません。 -- これはただの *view* です。"
