# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-08 12:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Arihiro TAKASE <artakase@gmail.com>, 2017\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../extending/index.rst:5
msgid "Extending and Embedding the Python Interpreter"
msgstr "Python インタプリタの拡張と埋め込み"

#: ../../extending/index.rst:7
msgid ""
"This document describes how to write modules in C or C++ to extend the "
"Python interpreter with new modules.  Those modules can not only define new "
"functions but also new object types and their methods.  The document also "
"describes how to embed the Python interpreter in another application, for "
"use as an extension language.  Finally, it shows how to compile and link "
"extension modules so that they can be loaded dynamically (at run time) into "
"the interpreter, if the underlying operating system supports this feature."
msgstr ""
"このドキュメントでは、Pythonインタプリンタを拡張する新しいモジュールをで C またはC++ "
"で書く方法を解説しています。このようなモジュールでは新しい関数を定義するだけではなく、新しい型や、そのメソッドを定義することができます。ドキュメントでは他のアプリケーションでPythonを拡張言語として使用するために、Pythonインタプリタをアプリケーションに埋め込む方法についても解説します。最後に、下層のオペレーティングシステムが動的(実行時)ロードをサポートしていれば、拡張モジュールが動的にライブラリにロードされるように、モジュールをコンパイルしリンクする方法について解説します。"

#: ../../extending/index.rst:15
msgid ""
"This document assumes basic knowledge about Python.  For an informal "
"introduction to the language, see :ref:`tutorial-index`.  :ref:`reference-"
"index` gives a more formal definition of the language.  :ref:`library-index`"
" documents the existing object types, functions and modules (both built-in "
"and written in Python) that give the language its wide application range."
msgstr ""
"このドキュメントでは、読者は Python について基礎的な知識を持ち合わせているものと仮定しています。形式ばらない Python 言語の入門には、 "
":ref:`tutorial-index` を読んでください。 :ref:`reference-index` を読めば、 Python "
"言語についてより形式的な定義を得られます。また、 :ref:`library-index` では、Python "
"に広い適用範囲をもたらしている既存のオブジェクト型、関数、および (組み込み、および Python で書かれたものの両方の) "
"モジュールについて解説しています。"

#: ../../extending/index.rst:21
msgid ""
"For a detailed description of the whole Python/C API, see the separate "
":ref:`c-api-index`."
msgstr "Python/C API 全体の詳しい説明は、別のドキュメントである、 :ref:`c-api-index` を参照してください。"

#: ../../extending/index.rst:26
msgid "Recommended third party tools"
msgstr "おすすめのサードパーティツール"

#: ../../extending/index.rst:28
msgid ""
"This guide only covers the basic tools for creating extensions provided as "
"part of this version of CPython. Third party tools like `Cython "
"<http://cython.org/>`_, `cffi <https://cffi.readthedocs.io>`_, `SWIG "
"<http://www.swig.org>`_ and `Numba <https://numba.pydata.org/>`_ offer both "
"simpler and more sophisticated approaches to creating C and C++ extensions "
"for Python."
msgstr ""

#: ../../extending/index.rst:40
msgid ""
"`Python Packaging User Guide: Binary Extensions "
"<https://packaging.python.org/en/latest/extensions/>`_"
msgstr ""
"`Python Packaging User Guide: Binary Extensions "
"<https://packaging.python.org/en/latest/extensions/>`_"

#: ../../extending/index.rst:38
msgid ""
"The Python Packaging User Guide not only covers several available tools that"
" simplify the creation of binary extensions, but also discusses the various "
"reasons why creating an extension module may be desirable in the first "
"place."
msgstr ""
"Python Packaging User "
"Guideはバイナリ拡張の作成が簡単になる便利なツールをカバーしているだけではなく、まず始めになぜ拡張モジュールを作ることが望ましいかの様々な理由について議論しています。"

#: ../../extending/index.rst:45
msgid "Creating extensions without third party tools"
msgstr "サードパーティツールなしで拡張を作る"

#: ../../extending/index.rst:47
msgid ""
"This section of the guide covers creating C and C++ extensions without "
"assistance from third party tools. It is intended primarily for creators of "
"those tools, rather than being a recommended way to create your own C "
"extensions."
msgstr ""
"ガイドのこの節ではサードパーティツールの補助無しに C および C++ 拡張を作成する方法を説明します。\n"
"これは自分自身の C 拡張を作成するおすすめの方法というよりも、主にそれらのツールを作成する人向けのものです。"

#: ../../extending/index.rst:63
msgid "Embedding the CPython runtime in a larger application"
msgstr "大規模なアプリケーションへの Python ランライムの埋め込み"

#: ../../extending/index.rst:65
msgid ""
"Sometimes, rather than creating an extension that runs inside the Python "
"interpreter as the main application, it is desirable to instead embed the "
"CPython runtime inside a larger application. This section covers some of the"
" details involved in doing that successfully."
msgstr ""
"Python インタープリタの中でメインアプリケーションとして実行される拡張を作るのではなく、 CPython をより大きなアプリケーションの中に埋め込む方が望ましいことがあります。\n"
"この節ではその上手い埋め込みに関わる詳細について説明します。"
